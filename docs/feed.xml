<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luis Garcia</title>
    <description>This is the personal website of Luis Garcia. Here you can read both technical and non-technical blogs, look at some projects, and get a little more insight about what makes him tick.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
      <pubDate>Sun, 06 Mar 2022 17:23:51 -0500</pubDate>
    <lastBuildDate>Sun, 06 Mar 2022 17:23:51 -0500</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>Create an Echo Show Skill with VS Code and the Serverless Framework</title>
        <description>&lt;h1 id=&quot;lets-make-an-echo-show-skill-with-the-visual-studio-code-and-the-serverless-framework&quot;&gt;Lets Make an Echo Show Skill with the Visual Studio Code and the Serverless Framework!&lt;/h1&gt;

&lt;p&gt;Checkout the completed project &lt;a href=&quot;https://github.com/lgarcia2/DemoEchoShowSkillWithServerless&quot;&gt;on my github!&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;If you’ve been following my posts lately, you’ll probably notice a pattern. I’ve been working a lot with Alexa Skills and Serverless lately. I’m doing a lot of learning and test projects to prepare myself for a bigger project that will combine my efforts. As I learn things, I want to be able to remember what I did and how its done. Thats a big reason why I write these posts; so I can go back later and review things I’ve done. It also has the benefit of possibly helping someone that may have the same problem or questions that I have. So with that in mind, here’s how to make an Echo Show skill with the Serverless Framework.&lt;/p&gt;

&lt;p&gt;For more information, here are some other helpful links&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://developer.amazon.com/en-US/docs/alexa/alexa-presentation-language/use-apl-with-ask-sdk.html&lt;/li&gt;
  &lt;li&gt;https://developer.amazon.com/en-US/docs/alexa/alexa-presentation-language/tutorial-add-first-visual-response-custom-skill.html&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;project-setup-review&quot;&gt;Project Setup Review&lt;/h1&gt;

&lt;p&gt;I’ll review it pretty quickly here, but for more details on how to set up the project checkout &lt;a href=&quot;https://luisgarcia.me/blog/technical/AlexaSkillWithServerless&quot;&gt;my post where I go into this in detail.&lt;/a&gt; Additionally, I’ll assume everything’s installed and configured so I’m just going to start creating a new project.&lt;/p&gt;

&lt;h2 id=&quot;create-the-new-skill&quot;&gt;Create The New Skill&lt;/h2&gt;

&lt;p&gt;First, I’ll launch Visual Studio Code, click the Alexa Skills Toolkit button and click “Create a Skill”
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/AlexaSkillWithServerless/VisualStudioScreenshot.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Skill Name&lt;/strong&gt; - “Show Demo” The name of the skill. I used “Show Demo” so I could invoke the skill by saying something like: “Alexa, open Show Demo.”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Default Language&lt;/strong&gt; - English&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Skill Model&lt;/strong&gt; - Custom&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Choose a method to host your skill’s backend resources&lt;/strong&gt; - “Provision your own” - A lot of good information on this can be found &lt;a href=&quot;https://developer.amazon.com/en-IN/docs/alexa/hosted-skills/build-a-skill-end-to-end-using-an-alexa-hosted-skill.html&quot;&gt;here.&lt;/a&gt; I chose the “Provision your own” to host it in my AWS account. I can deploy it and manage it there without any restriction from the Alexa free-tier. I’ll still have to work with the developer console, but I’ll spend much less time there. Besides, deploying this to AWS with Serverless is one of the points of the article!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Programing Language&lt;/strong&gt; - Python&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Local Directory&lt;/strong&gt; - The folder/repository created earlier.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After waiting a bit, the code will generate and the skill will be available for you in the Alexa Skill developer console.&lt;/p&gt;

&lt;h2 id=&quot;my-pre-commit-script&quot;&gt;My ‘pre-commit’ script&lt;/h2&gt;

&lt;p&gt;I want to avoid committing my skill-id to these public repositories (although I’ve been deleting these ‘demo’ skills anyway). To do that I’ve created a very rudimentary script to check all the files in the repo for a skill-id type string and prevent committing if one is found. I used the tool &lt;a href=&quot;https://pre-commit.com/&quot;&gt;pre-commit&lt;/a&gt; to help me do that. If you take a look at that script (alexa_skill_id_check_git_hook.py) again, you’ll see its rudimentary, has some TODO’s, etc… but it gets the job done for now. Someday I’ll work on improving it, so look forward to that in another post!&lt;/p&gt;

&lt;h1 id=&quot;prepare-the-skill-for-visuals&quot;&gt;Prepare The Skill For Visuals&lt;/h1&gt;

&lt;p&gt;In the past I’ve created ‘audio only’ types of skills. Theres a few differences and configuration details that need to change in order for us to add visuals to a skill. &lt;a href=&quot;https://developer.amazon.com/en-US/docs/alexa/alexa-presentation-language/tutorial-add-first-visual-response-custom-skill.html&quot;&gt;This AWS tutorial goes into it thorougly&lt;/a&gt; so check it out too.&lt;/p&gt;

&lt;h2 id=&quot;enable-the-apl-interface&quot;&gt;Enable the APL Interface&lt;/h2&gt;

&lt;p&gt;For visual skills we need to enable the APL interface. APL stands for “Alexa Presentation Language” its the feature that we’ll use to help us &lt;strong&gt;present&lt;/strong&gt; visuals to users. 
You can find it in the developer console in the Build tab in the Interfaces section under Alexa Presentation Language
Developer Console &amp;gt; Build &amp;gt; Interfaces &amp;gt; Alexa Presentation Language
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/EchoShowSkillWithServerless/EnableAlexaPresentationLanguage.png&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-a-new-apl-document&quot;&gt;Create a New APL Document&lt;/h2&gt;

&lt;p&gt;We’re now going to create an APL (“Alexa Presentation Language”) document to declare how we’ll display information. For this tutorial, we’ll do this in the Alexa Developer Console, but it can be done right in code as well.&lt;/p&gt;

&lt;p&gt;In the console, go to the Build tab, then under the “Assets” menu, click “Multimodal Responses”. Once that page opens, there are two types of responses “Audio” and “Visual”. We want “Visual”. (Build &amp;gt; Assets &amp;gt; Multimodal Responses &amp;gt; Visual)&lt;/p&gt;

&lt;p&gt;Click “Create Visual Response”
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/EchoShowSkillWithServerless/CreateAPL_MultiModalResponses.png&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will take you to a page with templates and fancy ways to display and organize your visual response. These are great and are worth taking a look at, but for our purposes we’re just going to create a blank response for now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/EchoShowSkillWithServerless/CreateBlankAPL.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So click “Blank Document” (in the upper right) which will create a blank response for us. After that we’ll go ahead and save the document and name it “HelloWorldDocument”. So click the save &lt;strong&gt;icon&lt;/strong&gt; in the upper right and type “HelloWorldDocument” as the template name&lt;/p&gt;

&lt;p&gt;This will save it as a document, and really, its just JSON. You can check it out by clicking “Code View” next to “GUI View” in the editor in the upper left.&lt;/p&gt;

&lt;h3 id=&quot;add-an-apl-package&quot;&gt;Add an APL Package&lt;/h3&gt;

&lt;p&gt;In the designer, go to the “Code View”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/EchoShowSkillWithServerless/BlankAPL_CodeView.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go ahead and add this object to the “import” array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
   &quot;name&quot;: &quot;alexa-layouts&quot;,
   &quot;version&quot;: &quot;1.5.0&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final code should look like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &quot;type&quot;: &quot;APL&quot;,
    &quot;version&quot;: &quot;1.8&quot;,
    &quot;license&quot;: &quot;Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\nSPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\nLicensed under the Amazon Software License  http://aws.amazon.com/asl/&quot;,
    &quot;settings&quot;: {},
    &quot;theme&quot;: &quot;dark&quot;,
    &quot;import&quot;: [
        {
           &quot;name&quot;: &quot;alexa-layouts&quot;,
           &quot;version&quot;: &quot;1.5.0&quot;
        }
    ],
    &quot;resources&quot;: [],
    &quot;styles&quot;: {},
    &quot;onMount&quot;: [],
    &quot;graphics&quot;: {},
    &quot;commands&quot;: {},
    &quot;layouts&quot;: {},
    &quot;mainTemplate&quot;: {
        &quot;parameters&quot;: [
            &quot;payload&quot;
        ],
        &quot;items&quot;: []
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just imported an APL package into our document. This package contains pre-defined resources that you can use to help display your information. In this case, we’re importing the alexa-layouts package.&lt;/p&gt;

&lt;p&gt;Now lets go ahead and use them.&lt;/p&gt;

&lt;h3 id=&quot;add-a-headline&quot;&gt;Add a Headline&lt;/h3&gt;

&lt;p&gt;Lets now add this object to our JSON, this time add it to the mainTemplate.items array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &quot;type&quot;: &quot;AlexaHeadline&quot;,
    &quot;primaryText&quot;: &quot;Display your text here.&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your code should look like this now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &quot;type&quot;: &quot;APL&quot;,
    &quot;version&quot;: &quot;1.8&quot;,
    &quot;license&quot;: &quot;Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\nSPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\nLicensed under the Amazon Software License  http://aws.amazon.com/asl/&quot;,
    &quot;settings&quot;: {},
    &quot;theme&quot;: &quot;dark&quot;,
    &quot;import&quot;: [
        {
           &quot;name&quot;: &quot;alexa-layouts&quot;,
           &quot;version&quot;: &quot;1.5.0&quot;
        }
    ],
    &quot;resources&quot;: [],
    &quot;styles&quot;: {},
    &quot;onMount&quot;: [],
    &quot;graphics&quot;: {},
    &quot;commands&quot;: {},
    &quot;layouts&quot;: {},
    &quot;mainTemplate&quot;: {
        &quot;parameters&quot;: [
            &quot;payload&quot;
        ],
        &quot;items&quot;: [
            {
                &quot;type&quot;: &quot;AlexaHeadline&quot;,
                &quot;primaryText&quot;: &quot;Display your text here.&quot;
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you screen should update to look like this image &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/EchoShowSkillWithServerless/DisplayYourTextHereAPL.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Don’t forget to save by clicking the save icon in the top right!&lt;/p&gt;

&lt;h3 id=&quot;hook-the-apl-to-a-data-source&quot;&gt;Hook the APL to a data source&lt;/h3&gt;

&lt;p&gt;Now that we’ve got something to show, lets hook it to a data source so we can display different things to the user other than “Display your text here.”&lt;/p&gt;

&lt;p&gt;Lets start by clicking the “DATA” icon in the leftmost column of controls.
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/EchoShowSkillWithServerless/ClickDataAPL.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You should see the empty code block &lt;code&gt;{}&lt;/code&gt; here. Lets go ahead and replace that with this populated code block. Note you won’t see anything change in this step&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &quot;helloWorldDataSource&quot;: {
        &quot;title&quot;: &quot;Hello World!&quot;,
        &quot;subtitle&quot;: &quot;I hope you&apos;re having fun!&quot;,
        &quot;color&quot;: &quot;@colorTeal800&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This adds the data source for our design tool to use. Now we need to reference this and bind it to our APL document we created.&lt;/p&gt;

&lt;p&gt;Since we’re done adding the data source and we’re modifying our APL document again, click the APL button in the leftmost column. This takes us back to the design space we were working with earlier.
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/EchoShowSkillWithServerless/DesignAPLAfterData.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll update our APL code again here. This time we’ll add to the parameters array. Add the string “helloWorldDataSource” to the parameters list in the mainTemplate object. It should look like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&quot;parameters&quot;: [
    &quot;helloWorldDataSource&quot;
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll also bind the data in our “helloWorldDataSource” to the displayed text. This is done by updating the primaryText property to the following value &lt;code&gt;${helloWorldDataSource.primaryText}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It should look like this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&quot;primaryText&quot;: &quot;${helloWorldDataSource.primaryText}&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this is changed, you should see the text change to “Hello World!”. This is exactly what we want. Now we have a data source that controls the text on screen!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/EchoShowSkillWithServerless/HelloWorldAPL.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While we’re here, lets add some of our other properties too. This is the final code I have for my APL document.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &quot;type&quot;: &quot;APL&quot;,
    &quot;version&quot;: &quot;1.8&quot;,
    &quot;license&quot;: &quot;Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\nSPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\nLicensed under the Amazon Software License  http://aws.amazon.com/asl/&quot;,
    &quot;settings&quot;: {},
    &quot;theme&quot;: &quot;dark&quot;,
    &quot;import&quot;: [
        {
           &quot;name&quot;: &quot;alexa-layouts&quot;,
           &quot;version&quot;: &quot;1.5.0&quot;
        }
    ],
    &quot;resources&quot;: [],
    &quot;styles&quot;: {},
    &quot;onMount&quot;: [],
    &quot;graphics&quot;: {},
    &quot;commands&quot;: {},
    &quot;layouts&quot;: {},
    &quot;mainTemplate&quot;: {
        &quot;parameters&quot;: [
            &quot;helloWorldDataSource&quot;
        ],
        &quot;items&quot;: [
            {
                &quot;type&quot;: &quot;AlexaHeadline&quot;,
                &quot;primaryText&quot;: &quot;${helloWorldDataSource.title}&quot;,
                &quot;secondaryText&quot;: &quot;${helloWorldDataSource.subtitle}&quot;,
                &quot;backgroundColor&quot;: &quot;${helloWorldDataSource.color}&quot;
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;save-and-rebuild&quot;&gt;Save and Rebuild!&lt;/h3&gt;

&lt;p&gt;Looking good! Lets make sure to save our work, click the save icon in the upper right. We also have to rebuild our model before we start making any code changes. Click the back button in the upper left. That should take you back to the developer console. You can click the build tab, then the build entry on the left. Alternatively, you can click “Interfaces” then “Build Model” at the top of the page.&lt;/p&gt;

&lt;h1 id=&quot;write-the-code-to-interact-with-the-visuals&quot;&gt;Write the Code to Interact with the Visuals&lt;/h1&gt;

&lt;p&gt;Now we need to add this APL document to our lambda function in code. We need to respond with the APL document when skill is invoked. If you remember that should be in the skill’s ‘lambda’ folder. There should be a ‘hello_world.py’ for us to open up.&lt;/p&gt;

&lt;p&gt;In the file, I’m just going to handle this new APL in the launch of the skill, for more complex interactions, checkout some of the other methods.&lt;/p&gt;

&lt;p&gt;I’m going to modify the LaunchRequestHandler class’s method “handle”. I’m going to add this code right at the beginning of the function, before any responses are returned. When you’re writing other functions, be sure to think carefully about where you may want to handle any APL interactions.&lt;/p&gt;

&lt;p&gt;Here’s my code for adding the APL to the response&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;supported_interfaces = ask_utils.request_util.get_supported_interfaces(handler_input)
if supported_interfaces.alexa_presentation_apl is not None:
    logging.info(&apos;This device supports APL&apos;)

    document_name = &quot;HelloWorldDocument&quot; # The name of the APL we saved
    token = document_name + &quot;Token&quot;
    handler_input.response_builder.add_directive(
        RenderDocumentDirective(
            token=token,
            document={
                &quot;src&quot;:&apos;doc://alexa/apl/documents/&apos; + document_name,
                &quot;type&quot;: &quot;Link&quot;
            },
            datasources={
                &quot;helloWorldDataSource&quot;:{
                    &quot;title&quot;: &quot;We did it!&quot;,
                    &quot;subtitle&quot;: &quot;Hello World is coming from code!&quot;,
                    &quot;color&quot;: &quot;@colorTeal800&quot;
                }
            }
        )
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quick Explaination: I’m using the sdk to figure out what kind of device the user’s device is. If its a device that supports a Presentation APL then we can proceed. I’ll add the “RenderDocumentDirective” to render the APL document that we created. Right now the APL document is stored in the developer console. If you remember we stored it named “HelloWorldDocument”, so we need the name. The developer console will store this saved document at that reference &lt;code&gt;doc://alexa/apl/documents/&lt;/code&gt;. A little later, I’ll show you what it looks like if you were to use an APL committed with your code. This Directive is added to the response and is returned to the user. If we’ve done everything right we can save, build, and deploy our skill!&lt;/p&gt;

&lt;p&gt;NOTE: Each time you update your APL documents in the developer console, you have to rebuild your model to make sure your changes are available.&lt;/p&gt;

&lt;h2 id=&quot;serverless-comes-in&quot;&gt;Serverless Comes In&lt;/h2&gt;

&lt;p&gt;So far, this has just been a tutorial on working with APL’s. I want to make sure I’m not forgetting Serverless since its our deployment mechanism. Let’s start working with it. See my &lt;a href=&quot;https://luisgarcia.me/blog/technical/AlexaSkillWithServerless&quot;&gt;first Serverless Alexa Skill post&lt;/a&gt; for more details.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First lets initialize serverless by running the command &lt;code&gt;serverless create --template aws-python&lt;/code&gt; in the lambda directory.&lt;/li&gt;
  &lt;li&gt;Rework the serverless.yml as follows&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;service: DemoEchoShowSkill
frameworkVersion: &apos;2&apos;

plugins:
  - serverless-python-requirements
provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
custom:
  pythonRequirements:
    dockerizePip: non-linux

functions:
  hello:
    handler: hello_world.handler
    events: 
      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Make sure you change your alexaSkill parameter so it matches whatever your skills skill Id is)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install the plugin &lt;code&gt;serverless-python-requirements&lt;/code&gt; the ASK SDK is not in the standard libraries so you have to add the lib in your requirements.txt file and package it up when you deploy&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Deploy the skill with the command &lt;code&gt;serverless deploy&lt;/code&gt; (Make sure you’ve configured your aws cli and profile)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once deployed, in the AWS developer console, go to the Build tab, then in the Endpoint section select “Aws Lambda ARN” and copy/paste the ARN of your deployed lambda function into the Default Region box and clid Save Endpoints, then re build the skill.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;test-it-out&quot;&gt;Test It Out!&lt;/h1&gt;

&lt;p&gt;Now you can go to the Alexa Developer Console, go to the Test tab, make sure “Device Display” is checked and invoke your skill. I did this by typing ‘hello world’ in the Alexa Simulator textbox. (If you dont know your invocation name, you can go to Build -&amp;gt; Invocations -&amp;gt; Skill Invocation Name). Once your skill has been invoked you should be able to scroll down in the simulator and see the visuals!
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/EchoShowSkillWithServerless/FirstSuccessfulTest.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h1&gt;

&lt;p&gt;If you’re satisfied with our results so far, thats great, take what you learned and go apply it. I’m going to continue on though and explore some extra concepts now though. I want to be able to develop some of the following items so if you’re interested keep reading.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Add the APL document to our repo and maintain it as part of the deployment.&lt;/li&gt;
  &lt;li&gt;Support adding graphics to the display.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sync-changes-back-to-the-code&quot;&gt;Sync Changes Back to the Code&lt;/h2&gt;

&lt;p&gt;After Creating our APL document we need to save our changes and build the model if you haven’t done so in the above steps. After that we can sync the changes back to our code so the APL document can be worked with and committed.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Save the Interface - This one’s easy, at the top of the Developer Console in the build tab there’s a “Save Interfaces” button. Click that.&lt;/li&gt;
  &lt;li&gt;Build the Model - Another easy one, at the top of the Developer Console in the build tab there’s a “Build Model” button. Click that, it may take some time, so be patient&lt;/li&gt;
  &lt;li&gt;Sync the changes - This one’s a little tricky. The best way I’ve found to do this is through VSCode. Go to the Alexa Skills Toolkit extension. From there you can see your skill (Mine’s named “Demo Show”). Open up all the sub-options (not sure what to call these, but they’re the “Skill manifest” and “Interaction model”. We’ll use “Alexa Presentation Language (APL)” menu later). Click Download on each one and then click the “Download” button when its page is open. If it asks you to select a folder select the whole project root (not the “Demo Show” folder, but the github repo name type folder i.e. “DemoEchoShowSkillWithServerless”). When a file opens up, you may have to ctrl+s to save it. This process should overwrite/add the correct files in the correct places.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/EchoShowSkillWithServerless/DownloadConsoleFiles.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, in the “Skills Management” section in this same page you can “Download and edit skill” be careful with this one though. If you do it in the current directory it can overwrite and delete your files. If you use this, my suggestion is to download it to a seperate folder, then merge that folder into your current working directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/EchoShowSkillWithServerless/SyncAfterEnableAPL.png&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After this is done, you can git commit, push, whatever you want. That being said, any changes you to the local code wont be reflected back into the skill and the developer console until you deploy your changes back upstream.&lt;/p&gt;

&lt;h2 id=&quot;sync-changes-back-upstream-to-the-developer-console&quot;&gt;Sync Changes Back Upstream to the Developer Console&lt;/h2&gt;

&lt;p&gt;Once you’ve got everything where you need it, in VSCode in the Alexa Skills Toolkit extension page theres the left column where we downloaded our skill manifest, interaction model, and APL. There’s also an item to deploy the skill named “Deploy Skill”. Click the item, and a page will open up. Make sure you hit the refresh button so you’re aware of the most recent sync status and if you’re ready and everything is up to date you can click the Deploy (or big red ‘Force Deploy’) button&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/EchoShowSkillWithServerless/SyncUpstreamToConsole.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;!--## What If You Don&apos;t Wan&apos;t To Do That?

There are still some other options for deploying an APL. And we can take a look at doing that. Before we get into that I do want to note that the last deployment method had other benefits too. In additon to the APL, we also deployed other items needed for our skill like the interaction model and items in the skill manifest (not the lambdas and other resources though, those were deployed by serverless)

This next method of deploying an APL is only applicable to the APL document. --&gt;

&lt;h2 id=&quot;must-have-more-&quot;&gt;Must Have More …&lt;/h2&gt;

&lt;p&gt;Text is great, but I’m looking forward to adding images. Let’s see what’s required.&lt;/p&gt;

&lt;p&gt;I started by adding a new APL. In the build menu, I clicked Multimodal Responses, then Create Visual Response. From here you can upload a template, use a blank document, or choose from one of the templates. I’m going to choose a template, I can’t say I’m a very strong designer yet! However, the “Responsive Templates” tab doesnt have quite what I’m after. I’m going to go to the “Explore APL” tab and choose the “Image Display” template. Its pretty minimal with a background image, a title, a logo image, and a main image. 
Here I’m really only interested in the main image so this template is great! I’m going to go ahead and save this template and name it “ImageAPLDocument”.&lt;/p&gt;

&lt;p&gt;Now I’ve got to sync it to my repo. I’ll go back to the main Alexa Skill page, under the build tab, after clicking the ‘CUSTOM’ bar on the left, I clicked build so that my changes were saved.&lt;/p&gt;

&lt;p&gt;Back in Visual Studio, I can sync my code with the skill in the console by going to the Alexa Skills Toolkit, clicking the ‘Deploy Skill’ menu (Notably, I’m not deployng yet). From here, I want to hit the refresh button to refresh my status.&lt;/p&gt;

&lt;p&gt;Now I’m going to get my newly created APL document into my repo on disk. Still in the Alexa Skills Toolkit, under ‘Skills Management’ I clicked “Download and edit skill” and clicked my repository root folder when the popup came, this can overwrite your changes so see the next paragraph if you want alternative.&lt;/p&gt;

&lt;p&gt;You can also sync APL’s by going to the Alexa Presentation Language section and click the Download item. The dropdown should be populated with my “ImageAPLDocument” doc that I created earlier (If it doesn’t show up, give it ~10 sec) and I’ll go ahead and download it. Notably, this just downloads it to memory. It does not download the files to disk, so if you want the APL document and its data sources in the right places, you may want to sync the whole project like I did earlier&lt;/p&gt;

&lt;p&gt;Now that I’ve got my ImageAPLDocument, I’m going to start making some changes! Although that may be misleading. I’m not going to change the APL docs at all, in fact, I’m just going to leave them be. However, I will change my lambda function.&lt;/p&gt;

&lt;p&gt;I’m going to source some new images from the API https://picsum.photos/. With that API you can generate a random image of your requested size. I’m using https://picsum.photos/300/200. 
I’ll change my ‘handler’ function to look like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def handle(self, handler_input):
        # type: (HandlerInput) -&amp;gt; Response
        logging.info(&quot;Handling...&quot;)
        supported_interfaces = ask_utils.request_util.get_supported_interfaces(handler_input)
        # If this device supports APL 
        # e.g. If this device is an Echo Show
        if supported_interfaces.alexa_presentation_apl is not None:
            logging.info(&apos;This device supports APL&apos;)
            #
            # Flag you can toggle based on where your APL is
            # This isnt production code, its just for demonstration purposes
            the_api_document_is_only_in_the_developer_console = True
            #
            # add &quot;Alexa.Presentation.APL.RenderDocument&quot; to the handler_input
            if the_api_document_is_only_in_the_developer_console:
                # if your APL is only in the console, load it from the console
                document_name = &quot;ImageAPLDocument&quot; # The name of the APL we saved
                token = document_name + &quot;Token&quot;
                # using an image api: https://picsum.photos/300/200
                # for more info see: https://picsum.photos/
                handler_input.response_builder.add_directive(
                    RenderDocumentDirective(
                        token=token,
                        document={
                            &quot;src&quot;:&apos;doc://alexa/apl/documents/&apos; + document_name,
                            &quot;type&quot;: &quot;Link&quot;
                        },
                        datasources={
                            &quot;imageTemplateData&quot;: {
                                &quot;type&quot;: &quot;object&quot;,
                                &quot;objectId&quot;: &quot;imageSample&quot;,
                                &quot;properties&quot;: {
                                    &quot;backgroundImage&quot;: {
                                        &quot;contentDescription&quot;: None,
                                        &quot;smallSourceUrl&quot;: None,
                                        &quot;largeSourceUrl&quot;: None,
                                        &quot;sources&quot;: [
                                            {
                                                &quot;url&quot;: &quot;https://d2o906d8ln7ui1.cloudfront.net/images/templates_v3/gridlist/GridListBackground_Dark.png&quot;,
                                                &quot;size&quot;: &quot;large&quot;
                                            }
                                        ]
                                    },
                                    &quot;image&quot;: {
                                        &quot;contentDescription&quot;: None,
                                        &quot;smallSourceUrl&quot;: None,
                                        &quot;largeSourceUrl&quot;: None,
                                        &quot;sources&quot;: [
                                            {
                                                &quot;url&quot;: &quot;https://picsum.photos/300/200&quot;,
                                                &quot;size&quot;: &quot;large&quot;
                                            }
                                        ]
                                    },
                                    &quot;title&quot;: &quot;Plant of the day&quot;,
                                    &quot;logoUrl&quot;: &quot;https://d2o906d8ln7ui1.cloudfront.net/images/templates_v3/logo/logo-modern-botanical-white.png&quot;
                                }
                            }
                        }
                    )
                )
            else:
                # if your APL is alongside the code, load it from the package
                # NOTE: it must be in a specefic place (in the lambda folder)
                # see https://developer.amazon.com/en-US/docs/alexa/alexa-presentation-language/use-apl-with-ask-sdk.html 
                # for more detail
                handler_input.response_builder.add_directive(
                    RenderDocumentDirective(
                        token=HELLO_WORLD_TOKEN,
                        document=_load_apl_document()
                    )
                )
        else:
            logging.info(&apos;This device does not support APL. \r\n Supported Interfaces: \r\n {supported_interfaces}&apos;)
        #
        #
        speak_output = &quot;Welcome, you can say Hello or Help. Which would you like to try?&quot;
        #
        return (
            handler_input.response_builder
                .speak(speak_output)
                .ask(speak_output)
                .response
    )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Its a little messy, but I’ll leave cleaning it up as an excersize for the reader. The important part is that I copied the JSON from the ImageAPLDocument’s datasources into the data source from the render document directive. From here, I left the background image and I left the logo. I did change the main image’s source to be the API I referenced earlier (https://picsum.photos/300/200). Now when the skill is invoked, it’ll show a new random image from the API. Check it out! &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/EchoShowSkillWithServerless/EchoShowPictureWorking.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get it to deploy, dont forget to deploy and build the skill and deploy the serverless.yml as well. From there go to the Test tab in the developer console and invoke your skill!&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Jan 2022 13:00:00 -0500</pubDate>
        <link>/blog/technical/EchoShowSkillWithServerless</link>
        <guid isPermaLink="true">/blog/technical/EchoShowSkillWithServerless</guid>
        
        <category>Alexa</category>
        
        <category>Echo</category>
        
        <category>Show</category>
        
        <category>Skill</category>
        
        <category>AWS</category>
        
        <category>Amazon</category>
        
        <category>Serverless</category>
        
        <category>Framework</category>
        
        <category>Visual</category>
        
        <category>Studio</category>
        
        <category>Code</category>
        
        
        <category>Technical</category>
        
      </item>
    
      <item>
        <title>Create an Alexa Skill with a Dynamo Database</title>
        <description>&lt;h1 id=&quot;lets-make-an-alexa-skill-with-a-dynamo-database&quot;&gt;Lets Make an Alexa Skill with a Dynamo Database&lt;/h1&gt;

&lt;p&gt;Checkout the completed project &lt;a href=&quot;https://github.com/lgarcia2/DemoAlexaSkillWithDatabase&quot;&gt;on my github!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In my post about &lt;a href=&quot;https://luisgarcia.me/blog/technical/AlexaSkillWithServerless&quot;&gt;Creating an Alexa Skill with VSCode and the Serverless Framwork&lt;/a&gt; I made a simple hello world Alexa Skill so that anyone can get up and running creating and deploying Alexa Skills easily. Now that we’ve seen how easy it can be to develop and deploy, lets start to introduce some complexity!&lt;/p&gt;

&lt;p&gt;A large part of many applications is a data layer to store information. I want to be able to have a skill that can store and retrieve custom user data. With that in mind I’ll need a database to store the data and I’ll need to implement code to interact with it.&lt;/p&gt;

&lt;p&gt;This project builds upon my previous work. If you haven’t checked it out, &lt;a href=&quot;https://luisgarcia.me/blog/technical/AlexaSkillWithServerless&quot;&gt;now’s a good time to look.&lt;/a&gt; With that in mind, I’ll continue by adding a DynamoDB table to my serverless.yml file. This will allow a new DynamoDB table to be created whenever I run the &lt;code&gt;serverless deploy&lt;/code&gt; command. Infrastructure as code makes deploying things and identifying and maintaining aws resources a lot easier.&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;In expanding our Hello World application, I’ll add a piece to track how many times the application has said hello to the Alexa user.&lt;/p&gt;

&lt;h2 id=&quot;designing-the-dynamo-db-table&quot;&gt;Designing the Dynamo DB Table&lt;/h2&gt;

&lt;p&gt;I’m using AWS’s Dynamo DB for a few reasons. Its AWS native resource thats easy to work with. The boto3 python library makes it easy to work with within python and AWS Lambda functions. Its easy to add to a Cloud Formation template or my serverless.yml file. Lastly, I can always use more practice with it.&lt;/p&gt;

&lt;p&gt;I mention that I could use more practice with it, because I’m more accustomed to relational databases (think SQL) where data is usually stored across multiple tables in seperate columns per table. Relational databases often use primary keys and foreign keys to join data together across tables to organize, manage, and construct objects to use in code.&lt;/p&gt;

&lt;p&gt;DynamoDB on the other hand, is non-relational, sometimes called NoSQL. It doesn’t user joins or other concepts from relational databases. With that in mind, our table design will be very different and so will our access patterns. I’ll do my best to explain my design decisions here, but to learn more about NoSQL database design with Dynamo, you can checkout &lt;a href=&quot;https://aws.amazon.com/blogs/compute/creating-a-single-table-design-with-amazon-dynamodb/&quot;&gt;this AWS post&lt;/a&gt; &lt;a href=&quot;https://www.sensedeep.com/blog/posts/2021/dynamodb-singletable-design.html&quot;&gt;or this post&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;columns&quot;&gt;Columns&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Partition Key&lt;/strong&gt;
As I mentioned earlier, there are many differences between relational and non-relational databases. Relational databases have a Primary key to query and help organize the data among other things. For our non-relational Dynamo database though, there is no primary key. We’ll instead use a &lt;em&gt;Partition Key&lt;/em&gt;. If you’re familiar with hash tables, sometimes called hash maps or dictionaries, think of this as the ‘key’, they’re very familiar concepts. A partition key is one of the most characteristic parts of a NoSQL database. Our usage patterns will, in a lot of ways, mimic the patterns of a hash map or dictionary. So with that in mind, a partition key will be our first column in our database.&lt;/p&gt;

&lt;p&gt;Another thing the differs between relational and non-relational databases is the number of tables. For relational databases, the data is stored across many tables and joined together. In non-relational, its much more appropriate to store and organize all the data in the same table. You can query different objects stored with different styles of keys using different sorting options. That is, we’ll store our data as a JSON string. That JSON string can be a different object across rows of data. Its important to know what that object is and how to deserialize it, so establishing the keys and key data is important.&lt;/p&gt;

&lt;p&gt;Let’s consider our access pattern now. Our problem states that we want to know how many times our application has said “hello” to our user. Lets make the partition key relate to the user so that we can query the number of times we’ve said hello by a user’s id. In other words, we’ll ask our database this question: “For user id {x}, what is the number of times we’ve said hello?”. Another way to represent this is with some psuedo-code (Note this code wont be used in our application, but it demonstrates our access pattern)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;userId = &quot;x&quot;
numberOfHellos = myDatabase[userId]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For our Alexa ppplication, we’ll use our user’s userId as part of the partition key. According to the &lt;a href=&quot;https://developer.amazon.com/en-US/docs/alexa/custom-skills/request-and-response-json-reference.html#user-id&quot;&gt;Alexa documentation&lt;/a&gt; userId is a string so we’ll make the datatype of our Partition Key a string as well. We also want other data in our partition key, so a string is a good way to satisfy both those requirements.&lt;/p&gt;

&lt;p&gt;So lets make our first column in our table look like this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;pk&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;user#abc-123-456&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;user#def-567-890&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;user#ghi-456-567&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Sort Key&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you expected more than one row to be returned when you queried an individual pk (in our case the userId) then it can be helpful to sort that data so that you can get the exact row you’re after. For the purposes of our problem, this isn’t necessary since we’ll only have one row per user. However, for more complex applications, one could use a &lt;em&gt;Sort Key&lt;/em&gt; to enhance and optimize the queries you run to get your data. &lt;a href=&quot;https://aws.amazon.com/blogs/compute/creating-a-single-table-design-with-amazon-dynamodb/&quot;&gt;Checkout those posts&lt;/a&gt; &lt;a href=&quot;https://www.sensedeep.com/blog/posts/2021/dynamodb-singletable-design.html&quot;&gt;I linked earlier&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Column&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For our data column, I’m just going to store our object as serialized json. Something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &quot;numberOfHellos&quot;: 0
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ll just name the column data sticking with the idea that any object can be stored in a non-relational database. That being said, its important to consider how you will know &lt;em&gt;what&lt;/em&gt; data is stored in this column. That may be a reason to add an additional column like a sort key, a global index, or just another column.&lt;/p&gt;

&lt;p&gt;Our final table will end up looking something like this:
| pk | data |
| — | — |
| user#abc-123-456 | {“numberOfHellos”:0} |
| user#def-567-890 | {“numberOfHellos”:5} |
| user#ghi-456-567 | {“numberOfHellos”:2} |&lt;/p&gt;

&lt;h2 id=&quot;adding-to-serverless&quot;&gt;Adding to Serverless&lt;/h2&gt;

&lt;p&gt;Now that our table is designed, lets add it to our serverless.yml file so it can be deployed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resources:
  Resources:
    helloLambdaIamRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${opt:stage, self:provider.stage}-helloLambdaRole
        AssumeRolePolicyDocument:
          Version: &apos;2012-10-17&apos;
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${opt:stage, self:provider.stage}-LambdaDynamoAndLogPolicy
            PolicyDocument:
              Version: &apos;2012-10-17&apos;
              Statement:
                - Effect: Allow
                  Action:
                    - logs:*
                  Resource: &quot;*&quot;
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:Query
                  Resource: 
                    Fn::GetAtt: [helloWorldDataTable, Arn]
    helloWorldDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          -
            AttributeName: &quot;pk&quot;
            AttributeType: &quot;S&quot;
        KeySchema:
          - 
            AttributeName: &quot;pk&quot;
            KeyType: &quot;HASH&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We add the table in a &lt;code&gt;Resources&lt;/code&gt; block in the &lt;code&gt;resources&lt;/code&gt; section. Yes its a little redundant and silly but you can &lt;a href=&quot;https://www.serverless.com/framework/docs/providers/aws/guide/resources/&quot;&gt;take that up with Serverless&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our resource is named &lt;code&gt;helloWorldDataTable&lt;/code&gt; and if I need to reference this resource anywhere else in my serverless.yml file then I’ll use this as the reference name&lt;/p&gt;

&lt;p&gt;From here you can use the &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html&quot;&gt;AWS Cloud Formation templeate reference&lt;/a&gt; for details on the other parameters, but I’ll go over them briefly too.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt; - for DynamoDB tables this is always &lt;code&gt;AWS::DynamoDB::Table&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Properties&lt;/strong&gt; - The specific DynamoDB properties for the resource
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;TableName&lt;/em&gt; - The name of the table. You &lt;em&gt;can&lt;/em&gt; hardcode this, but I named mine elsewhere in the &lt;code&gt;serverless.yml&lt;/code&gt;. You can checkout the &lt;a href=&quot;https://github.com/lgarcia2/DemoAlexaSkillWithDatabase&quot;&gt;whole source on github&lt;/a&gt; (NOTE this has different meaning than the reference name of the resource we specified earlier)&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;BillingMode&lt;/em&gt; - This is how AWS bills you for interacting with the resource. I chose &lt;code&gt;PAY_PER_REQUEST&lt;/code&gt; in case my skill’s usage pattern varies wildly. Checkout the earlier reference for more information&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;AttributeDefinitions&lt;/em&gt; - This (in combination with KeySchema) is where our key colums are defined. Note, you don’t have to define &lt;em&gt;all&lt;/em&gt; columns here, just the ones that will be used as keys in the KeySchema definitions later
        &lt;ul&gt;
          &lt;li&gt;AttributeName - the column name&lt;/li&gt;
          &lt;li&gt;AttributeType - the datatype of the column “S” for string, “N” for number, “B” for binary&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;em&gt;KeySchema&lt;/em&gt; - This defines the keys for the table
        &lt;ul&gt;
          &lt;li&gt;AttributeName - the name of the column, this must be equal to one of the AttributeNames defined in the AttributeDefinitions&lt;/li&gt;
          &lt;li&gt;KeyType - the role of the key. “HASH” for partition keys “RANGE” for sort keys&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also see the IAM role that I defined too. In order to interact with the database, we need to give the role our lambda uses permissions to read and write to the database. So in the resources section I defined a role that is able to read/write to the database, write logs, and interact with lambda. I also made sure the lambda used the role by adding this line to the function definition &lt;code&gt;role: helloLambdaIamRole&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that our table and security is defined, we can move on to writing the code to use it!&lt;/p&gt;

&lt;h2 id=&quot;interacting-with-our-database&quot;&gt;Interacting with our Database&lt;/h2&gt;

&lt;p&gt;Lets reflect on our problem before we write any code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Add a piece to track how many times the application has said hello to the Alexa user.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So lets have our application do the following&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A user invokes the application&lt;/li&gt;
  &lt;li&gt;From the database, we fetch the number of times this user has invoked the application
    &lt;ul&gt;
      &lt;li&gt;If the user row doesnt exist in the database for this user, create a row and set the number of times this application has been invoked value to 1&lt;/li&gt;
      &lt;li&gt;If the user row does exist, fetch the data, add 1 to it and persist the data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reply with a message that says “Hello World, I have said hello {x} times” to the user where {x} is the number fetched from the database + 1 (or the number persisted earlier)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example 1:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Our user invokes this application for the first time.&lt;/li&gt;
  &lt;li&gt;We attempt to lookup user data in the database but find zero rows&lt;/li&gt;
  &lt;li&gt;A row is persisted in the database with the userid and the number of times invoked set to 1&lt;/li&gt;
  &lt;li&gt;Alexa replies saying “Hello World, I have said hello one time”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example 2:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Our user invokes this application for the third time.&lt;/li&gt;
  &lt;li&gt;We attempt to lookup user data in the database and find a row with the number of times invoked = 2&lt;/li&gt;
  &lt;li&gt;the row is updated so that the number of times invoked = 3&lt;/li&gt;
  &lt;li&gt;Alexa replies saying “Hello World, I have said hello three times”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now lets write the code!&lt;/p&gt;

&lt;p&gt;I’m going to write three methods:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;get_number_of_hellos(userId: str) -&amp;gt; int&lt;/li&gt;
  &lt;li&gt;set_number_of_hellos(userId: str, number_of_hellos: int) -&amp;gt; None&lt;/li&gt;
  &lt;li&gt;create_hellos_message(number_of_hellos: int) -&amp;gt; str&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;get_number_of_hellos()&lt;/code&gt; will query the database and return the number of hellos found for the user
&lt;code&gt;set_number_of_hellos()&lt;/code&gt; will add or update the database with a number of hellos
&lt;code&gt;create_hellos_message()&lt;/code&gt; will create the message to return back to the user&lt;/p&gt;

&lt;p&gt;&lt;code&gt;create_hellos_message()&lt;/code&gt; is an easy one lets write it below in python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def create_hellos_message(number_of_hellos: int) -&amp;gt; str:
    # NOTE: english is funny, we have to say &apos;time&apos; or &apos;times&apos; so it sounds correct depending on whether there is one or more number of hellos
    if number_of_hellos == 1:
        return f&quot;Hello World, I have said hello {number_of_hellos} time&quot;
    else:
        return f&quot;Hello World, I have said hello {number_of_hellos} times&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;querying-the-database&quot;&gt;Querying the Database&lt;/h3&gt;

&lt;p&gt;Now that we’ve got our easiest method out of the way, lets interact with our database in code for the first time. For this lets &lt;code&gt;import boto3&lt;/code&gt; and make sure &lt;code&gt;boto3&lt;/code&gt; is in our &lt;code&gt;requirements.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;While we’re up in the top of our python file lets also &lt;code&gt;import os&lt;/code&gt; and &lt;code&gt;from boto3.dynamodb.conditions import Key, Attr&lt;/code&gt; and add some global variables&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import boto3
from boto3.dynamodb.conditions import Key, Attr
import os
import json

# Globals that should stay &apos;warm&apos; from lambda to lambda
TABLE_NAME = os.environ.get(&apos;HELLO_WORLD_DATA_TABLE&apos;)
REGION = os.environ.get(&apos;REGION&apos;)
DYNAMODB_RESOURCE = boto3.resource(&apos;dynamodb&apos;) 
DYNAMODB_TABLE = DYNAMODB_RESOURCE.Table(TABLE_NAME)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Normally, global variables should be something to frown on. However in this case, I want to keep these resource references ‘warm’. That is, if the lambda is invoked in rapid succession, less time will be spent initializing these resources since they’ve been previously initalized, or so I’ve been told. A cursory google neither proves or denies this though.&lt;/p&gt;

&lt;p&gt;Of these variables, we’ll just use DYNAMO_TABLE to query our table for data. Let’s start on our get_number_of_hellos method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def get_number_of_hellos(self, userId: str) -&amp;gt; int:
    user_value = f&apos;user#{userId}&apos;
    query_response = DYNAMODB_TABLE.query(
        KeyConditionExpression=Key(&apos;pk&apos;).eq(user_value)
    )

    query_response_items = query_response[&apos;Items&apos;]
    if len(query_response_items) &amp;lt; 1:
        return 0
    else:
        # there &apos;should&apos; only be one item returned, if there is &amp;gt; 1 then we&apos;ll just pick the first one
        data_str = query_response_items[0][&apos;data&apos;]
        data_obj = json.loads(data_str)
        return data_obj[&apos;numberOfHellos&apos;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One item that tripped me up was the difference between the Dynamo resource and the Dynamo client. The query syntax is different between the two.&lt;/p&gt;

&lt;p&gt;For more information on querying the database see &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GettingStarted.Python.04.html&quot;&gt;this AWS article.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;adding-to-the-database&quot;&gt;Adding to the database&lt;/h3&gt;

&lt;p&gt;Alright, last method. It should be pretty easy to copy and past our old code with a few changes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def set_number_of_hellos(self, userId: str, number_of_hellos: int) -&amp;gt; None:
    user_value = f&apos;user#{userId}&apos;
    data_obj = {}
    data_obj[&apos;numberOfHellos&apos;] = number_of_hellos
    db_item = {
        &apos;pk&apos;: user_value,
        &apos;data&apos;: json.dumps(data_obj)
    }

    DYNAMODB_TABLE.put_item(
        Item = db_item
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important part here is to get the item-to-persist correct. Make sure to name and add the columns correctly. Other than that its the same thing!&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;Lastly, reflecting on the problem statement from earlier, I reworked the ‘handle’ method in the ‘HelloWorldIntentHandler’ so that we could read, write, and get a good message from Alexa. Since we wrote good methods, the code is very easy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def handle(self, handler_input):
    # type: (HandlerInput) -&amp;gt; Response
    speak_output = &quot;Hello World!&quot;

    userId = handler_input.request_envelope.session.user.user_id
    number_of_hellos = self.get_number_of_hellos(userId)
    number_of_hellos = number_of_hellos + 1
    self.set_number_of_hellos(userId, number_of_hellos)
    speak_output = self.create_hellos_message(number_of_hellos)

    return (
        handler_input.response_builder
            .speak(speak_output)
            # .ask(&quot;add a reprompt if you want to keep the session open for the user to respond&quot;)
            .response
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;deploying-and-testing&quot;&gt;Deploying and Testing&lt;/h3&gt;

&lt;p&gt;Finally, we can deploy and test. I used this line in my powershell (or terminal if you’re using linux) &lt;code&gt;serverless deploy --region us-east-1 --stage dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure you have your aws profiles configured and it should deploy nicely for you in AWS. If you have problems, go back to my &lt;a href=&quot;https://luisgarcia.me/blog/technical/AlexaSkillWithServerless&quot;&gt;previous post&lt;/a&gt;. It should help out.&lt;/p&gt;

&lt;p&gt;Like last time you can go into the Alexa Developer Console and test your skill. With any luck you’ll be able to verify the examples from earlier&lt;/p&gt;

&lt;h2 id=&quot;checkout-the-code&quot;&gt;Checkout the code&lt;/h2&gt;

&lt;p&gt;You can check-out all the code on my &lt;a href=&quot;https://github.com/lgarcia2/DemoAlexaSkillWithDatabase&quot;&gt;github page&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Dec 2021 11:00:00 -0500</pubDate>
        <link>/blog/technical/AlexaSkillWithDatabase</link>
        <guid isPermaLink="true">/blog/technical/AlexaSkillWithDatabase</guid>
        
        <category>Alexa</category>
        
        <category>Echo</category>
        
        <category>Skill</category>
        
        <category>AWS</category>
        
        <category>Amazon</category>
        
        <category>Serverless</category>
        
        <category>Framework</category>
        
        <category>Visual</category>
        
        <category>Studio</category>
        
        <category>Code</category>
        
        
        <category>Technical</category>
        
      </item>
    
      <item>
        <title>Create an Alexa Skill with VS Code and the Serverless Framework</title>
        <description>&lt;h1 id=&quot;lets-make-an-alexa-skill-with-the-visual-studio-code-and-the-serverless-framework&quot;&gt;Lets Make an Alexa Skill with the Visual Studio Code and the Serverless Framework!&lt;/h1&gt;

&lt;p&gt;Checkout the completed project &lt;a href=&quot;https://github.com/lgarcia2/DemoAlexaSkillWithServerless&quot;&gt;on my github!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve been toying around with more tools, frameworks, and other things I find interesting these days. I’m interested in creating another Alexa Skill, but I’ve never had a good time managing the infrastructure and deployment. I’ve only used the free developer console and its tooling. Its been kind of a pain to provision resources, develop, and prototype rapidly. I’m fully willing to accept that I may be doing something wrong, but I haven’t yet found what.&lt;/p&gt;

&lt;p&gt;I’ve been playing with the &lt;a href=&quot;https://www.serverless.com/&quot;&gt;Serverless Framework&lt;/a&gt; lately and have found it pleasant to work with for describing AWS Infrastructure as Code. Serverless will create and deploy an AWS Cloud Formation stack for you. This tool seemed to me like a good way to solve my past problems when developing Alexa Skills. Hopefully it will help solve some of your problems too or at least provide a good guild to this specific case.&lt;/p&gt;

&lt;h1 id=&quot;before-you-start&quot;&gt;Before You Start&lt;/h1&gt;

&lt;p&gt;Before you continue to read, I wrote this article after I developed a couple Alexa skills. I will skip over a lot of the details of creating your first skill. Instead I’m focusing on the specific case of creating a new skill with Visual Studio Code and deploying the AWS infrastructure with the Serverless Framework. If you’re developing your first ever Alexa skill, I encourage you to keep reading, but a better guide might be &lt;a href=&quot;https://developer.amazon.com/en-US/docs/alexa/alexa-skills-kit-sdk-for-nodejs/develop-your-first-skill.html&quot;&gt;the one from Amazon themselves&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code&lt;/h1&gt;

&lt;p&gt;I’ve worked with the Microsoft Stack pretty extensively and I’m pretty accustomed to Visual Studio. Lately, a lot of my work has been directing me more towards Visual Studio Code though. I enjoy the tool for its relative familiarity, but also how it can integrate and work with a more diverse set of programming languages. It also just so happens supported by Amazon for developing skills via the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ask-toolkit.alexa-skills-kit-toolkit&quot;&gt;Alexa Skills Toolkit extension for Visual Studio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are some pretty good guides out there for working with the toolkit that I used when writing and developing this. Feel free to check them out while you’re here.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.amazon.com/en-US/docs/alexa/ask-toolkit/get-started-with-the-ask-toolkit-for-visual-studio-code.html&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.amazon.com/en-US/docs/alexa/ask-toolkit/vs-code-ask-skills.html&quot;&gt;Create Skills&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;set-up-the-environment&quot;&gt;Set Up the Environment&lt;/h1&gt;

&lt;p&gt;I started by getting everything set up.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, I downloaded and installed &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I chose to use &lt;a href=&quot;https://www.python.org/&quot;&gt;Python 3.8&lt;/a&gt; as my language of choice for developing this skill, so I made sure to add that &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.python&quot;&gt;extension.&lt;/a&gt; Python isn’t required for this though. Alexa skills are supported for a number of programming languages.&lt;/li&gt;
  &lt;li&gt;I installed the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ask-toolkit.alexa-skills-kit-toolkit&quot;&gt;Alexa Skills Toolkit extension&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;You’ll need &lt;a href=&quot;https://www.npmjs.com/get-npm&quot;&gt;NPM&lt;/a&gt; to install Serverless. Once that’s installed, follow the &lt;a href=&quot;https://www.serverless.com/framework/docs/providers/aws/guide/installation/&quot;&gt;Serverless Install Instructions&lt;/a&gt; to get serverless installed. The &lt;a href=&quot;https://aws.amazon.com/cli/&quot;&gt;AWS CLI tool&lt;/a&gt; is required too in case you didn’t already have it.&lt;/li&gt;
  &lt;li&gt;I already had both an &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;AWS account&lt;/a&gt; and an &lt;a href=&quot;https://www.developer.amazon.com/&quot;&gt;Amazon Developer account&lt;/a&gt;, so I didn’t need to create those, but if you don’t have them you’ll have to create those accounts. Make sure you’re able to use the AWS cli tool too!&lt;/li&gt;
  &lt;li&gt;After getting everything installed, I logged in and followed the &lt;a href=&quot;https://developer.amazon.com/en-US/docs/alexa/ask-toolkit/get-started-with-the-ask-toolkit-for-visual-studio-code.html&quot;&gt;Getting Started&lt;/a&gt; guide. If you’ve never developed a skill before, or have never used the extension, its an important guide to follow.&lt;/li&gt;
  &lt;li&gt;I created a directory and got it setup with git, &lt;a href=&quot;https://github.com/lgarcia2/DemoAlexaSkillWithServerless&quot;&gt;check it out here!&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;creating-the-skill&quot;&gt;Creating the Skill&lt;/h1&gt;

&lt;p&gt;After launching Visual Studio Code and opening the Alexa Skills Toolkit extension, I clicked the ‘Create new skill’ button. That button opens a new tab for creating a new skill. This tab contains all the parameters that must be filled out to create a new skill. Most of the them are fairly obvious, but I’ll describe what I put in the parameters and the decisions that drove those inputs.
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/AlexaSkillWithServerless/VisualStudioScreenshot.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Skill Name&lt;/strong&gt; - This is the name of your skill. I used ‘Demo’ so I could invoke the skill by saying something like: “Alexa, open Demo.” I can always change this later before publishing if I wanted to publish this or expand the project further.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Default Language&lt;/strong&gt; - I chose ‘English’ because thats what I speak!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Skill Model&lt;/strong&gt; - Custom, its the only option right now.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Choose a method to host your skill’s backend resources&lt;/strong&gt; - A lot of good information on this can be found &lt;a href=&quot;https://developer.amazon.com/en-IN/docs/alexa/hosted-skills/build-a-skill-end-to-end-using-an-alexa-hosted-skill.html&quot;&gt;here.&lt;/a&gt; For my purposes, I chose the “Provision your own” option so that I could host it in my AWS account. I can deploy it and manage it there without any restriction from the Alexa free-tier. As much as I want to just have the Alexa developer space host it, I found it a bit restricting. That being said, I’ll still have to work with the developer console, but I’ll spend much less time there. Besides, I’m &lt;a href=&quot;/blog/technical/CoronavirusGraphs&quot;&gt;no stranger&lt;/a&gt; &lt;a href=&quot;/blog/technical/AWSImageHosting&quot;&gt;to AWS.&lt;/a&gt; and deploying this to AWS with Serverless is the point of the article!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Programing Language&lt;/strong&gt; - Python, as I mentioned above.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Local Directory&lt;/strong&gt; - I chose the folder/repository I created earlier.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After I filled out all the parameters, I clicked the final ‘Create’ button and waited for the extension to build out some skeleton code for me.&lt;/p&gt;

&lt;h1 id=&quot;building-and-deploying-the-skill&quot;&gt;Building and Deploying The Skill&lt;/h1&gt;

&lt;p&gt;Since I chose to host my AWS resources outside of the Alexa developer space, and since I’m using serverless, I will generally have two deployment steps.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deploy Skill configuration to Alexa developer account&lt;/li&gt;
  &lt;li&gt;Deploy AWS resources to AWS account&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The steps can technically be done in any order, but its important to make sure they are coordinated well so that any change made to one will affect the other appropriately. That is, if I add some new interaction in the skill configuration, there should be corresponding code to back it up. With that in mind, its probably best to deploy the skill configuration first then the AWS resources. All that being said, I may change my mind on this as time progresses. Any developer in any project should be aware of their deployment order (if they have one) and dependencies.&lt;/p&gt;

&lt;h2 id=&quot;first-skill-deployment&quot;&gt;First Skill Deployment&lt;/h2&gt;

&lt;p&gt;When I first clicked the ‘Create’ button from the Visual Studio Extension, it automatically created and deployed the default ‘hello-world’ configuration to the developer space. Since this is just a demo, I’m not going to change the default hello-world skill too much. So for now, I’m just going to log-in to the &lt;a href=&quot;https://developer.amazon.com/alexa/console/ask&quot;&gt;skill console&lt;/a&gt;, open up the skill and note the Skill Id. The skill you created is found in the main page of the Alexa developer console. You can click the name of your skill to get into the details of it. Once the skill is open you can go to the ‘Build’ tab, then click ‘Endpoint’. We’re going to use a Lambda for our skill endpoint, so I’ll click the AWS Lambda ARN radio button and then note the Skill ID that appears to the right. Be sure to note the whole string there, it should be unique to your skill.
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/AlexaSkillWithServerless/DeveloperConsoleSkillId.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;first-aws-resource-deployment&quot;&gt;First AWS Resource Deployment&lt;/h2&gt;

&lt;p&gt;The next thing on my list was to deploy the AWS resources to make the skill work. Right now, all I’ve got is the &lt;code&gt;hello_world.py&lt;/code&gt; file that came by in the lambda directory by default. It should be easy enough to stand it up in AWS and make sure everything works as intended.&lt;/p&gt;

&lt;p&gt;If I were doing this manually, I’d zip up the file and its dependencies and then upload it to the lambda section of the AWS console. As I’ve mentioned, I found that to be rather tedious, so I’m choosing to use the &lt;a href=&quot;https://www.serverless.com/&quot;&gt;Serverless Framework&lt;/a&gt; to define, package, and deploy all my AWS resources. This should make things easy to rapidly prototype, test, and deploy.&lt;/p&gt;

&lt;p&gt;First I’ll initialize my serverless project by &lt;code&gt;cd&lt;/code&gt;‘ing into the &lt;code&gt;lambda&lt;/code&gt; directory that was created and I’ll run &lt;code&gt;serverless create --template aws-python&lt;/code&gt;. This will create a nice little serverless template file (&lt;code&gt;serverless.yml&lt;/code&gt;) for me to use. You can always create this file manually if you know what you’re doing. The command will also create a default function &lt;code&gt;handler.py&lt;/code&gt;. I’ll go ahead and remove that file since I don’t need it, but I will tweak my &lt;code&gt;serverless.yml&lt;/code&gt; file accordingly.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;serverless.yml&lt;/code&gt; file we created has a lot of information in it that is useful if you’re starting out with serverless. Check it all out if you have time, but I only care about a few parameters. First, I’ll change the value in the &lt;code&gt;service:&lt;/code&gt; to &lt;code&gt;DemoAlexaSkill&lt;/code&gt; since thats a good memorable name for the Cloud Formation Stack that will be created. Under &lt;code&gt;provider:&lt;/code&gt; and under &lt;code&gt;runtime:&lt;/code&gt; I made sure I specified &lt;code&gt;python3.8&lt;/code&gt;. I also like to define the default stage and region too, so I’ll uncomment those lines.&lt;/p&gt;

&lt;p&gt;The top of my file looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service: DemoAlexaSkill
frameworkVersion: &apos;2&apos;

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we can skip ahead to defining our lambda function.&lt;/p&gt;

&lt;p&gt;Lambda functions are defined in the &lt;code&gt;functions:&lt;/code&gt; block. By default, Serverless created an example ‘hello’ function with the handler.py file we deleted earlier. We can see how Serverless defined the function in this block of code in the serverless.yml file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;functions:
  hello:
    handler: handler.hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We only need to change a little bit for now to get our skill working, but I strongly encourage you to read more about Serverless so that you can get a better idea of what it can do.&lt;/p&gt;

&lt;p&gt;First, we want to define the lambda’s entry point. A default function was defined in the &lt;code&gt;handler.py&lt;/code&gt; file when we created the &lt;code&gt;serverless.yml&lt;/code&gt; file. We’re using different lambda code I’ll replace it with the &lt;code&gt;hello_world.py&lt;/code&gt; that was created with our skill. That file contains lambda function code so we can just swap some parameters to that the snippet so that our file now looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;functions:
  hello:
    handler: hello_world.handler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;hello_world&lt;/code&gt; is the name of the file containing the lambda code to execute, as in &lt;code&gt;hello_world.py&lt;/code&gt;. The &lt;code&gt;.handler&lt;/code&gt; refers to the entry point within that file. In the old, default &lt;code&gt;handler.py&lt;/code&gt; that serverless created, the method’s name was &lt;code&gt;hello&lt;/code&gt;. In our code, its &lt;code&gt;handler&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that the code is ‘done’, we’ll enable it to be used by our skill created in the developer console. With serverless we can just reference it in the serverless file. Its pretty easy as you can see with the updated block.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;functions:
  hello:
    handler: hello_world.handler
    events: 
      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://www.serverless.com/examples/aws-node-alexa-skill&quot;&gt;This is a good quick reference if you need more info.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The new parameter &lt;code&gt;alexaSkill:&lt;/code&gt; should be populated with your Skill Id that I mentioned to note earlier. Do not use &lt;code&gt;amzn1.ask.skill.xx-xx-xx-xx&lt;/code&gt;. Use your own skill’s id from the developer console.&lt;/p&gt;

&lt;p&gt;Once that’s done we’re ready to deploy! Make sure you have the AWS CLI configured correctly (you need an IAM user that can deploy resources to your AWS account). Also make sure that serverless has the proper AWS configuration as well. If all is configured correctly, you can run this command to see your lambda deployed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;serverless deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;look-for-the-lambda-in-aws&quot;&gt;Look for the Lambda in AWS&lt;/h2&gt;

&lt;p&gt;We defined the serverless stage as ‘dev’ and we know the service was named ‘DemoAlexaSkill’ in the serverless.yml we created earlier. After running the deploy command, our code was deployed in our region as a Cloud Formation Stack with a name like DemoAlexaSkill-dev. ‘DemoAlexaSkill’ comes from what was defined as the service name and ‘dev’ comes from the serverless stage. To find the lambda function you can click into and explore the ‘Resources’ tab in the Cloud Formation Stack. Alternatively, since we know the name in our serverless.yml file, we can look for a lambda created with the name ‘DemoAlexaSkill-dev-hello’. ‘DemoAlexaSkill’ comes from what was defined as the service name. ‘dev’ comes from the stage and ‘hello’ is from the name we gave to the lambda.
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/AlexaSkillWithServerless/FunctionOverview.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After getting into the lambda function in the console, you can see that it is configured to be invoked by Alexa Skills Kit and it should have the permissions automatically created for it too; the wonders of serverless! Make sure to copy the new lambda function’s ARN. We’ll need it for the next step.&lt;/p&gt;

&lt;h1 id=&quot;define-skill-configuration-and-test&quot;&gt;Define Skill Configuration and Test!&lt;/h1&gt;

&lt;p&gt;To finish things up, we can go back to the &lt;a href=&quot;https://developer.amazon.com/alexa/console/ask&quot;&gt;Alexa Developer console&lt;/a&gt;. Just like before, we need to find the skill that we created before (mine’s named ‘Demo’). After getting into the skill, we need to configure its build. So click the ‘Build’ tab at the top and then the ‘Endpoint’ item from the menu on the left. From there, just like when we copied the Skill Id before, click the AWS Lambda ARN radio button. This time we’ll paste in the ARN of the lambda function we created earlier into the ‘Default Region’ box. This will define our lambda as the endpoint to call when the Alexa skill is invoked. After the value is in the box, you can click ‘Save Endpoints’ at the top of the page and we’re ready to test.
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/AlexaSkillWithServerless/DeveloperConsoleLambdaArn.PNG&quot; alt=&quot;PNG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Testing from the Developer console is pretty easy, you can just go to the ‘Test’ tab at the top of the Skill page. Once you’ve gotten to the page, most things will be greyed out. In order to start testing, the tests must be enabled for development by selecting ‘Development’ from the drop down at the top of the page. From there you can toy around with enabling your mic, and treating the test page just like an Alexa device. You can test the skill we created by clicking the mic box and saying ‘hello world’. From an efficiency point of view, I prefer to type ‘hello world’ in the box. Regardless of your choice, Alexa should echo back to you the message “Welcome, you can say Hello or Help. Which would you like to try?”. This is the behavior that was implemented in the hello_world.py file by default. Now you’re all set up to start playing with Alexa!&lt;/p&gt;

&lt;h1 id=&quot;cleanup&quot;&gt;Cleanup&lt;/h1&gt;

&lt;p&gt;In order to cleanup the resources we deployed to the AWS account we can remove them with serverless. Its as easy as running the following command in the directory where the serverless.yml exists.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;serverless remove
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’ll cleanup all the things we deployed to AWS. If you want to remove the skill from the Alexa Developer console, that can be done too. You can go to the main page in the Alexa Developer Console where all your skills are listed. There should be an ‘Actions’ column with a dropdown menu on the skill that we created. If you choose the ‘Delete’ action, the skill will be deleted.&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;I wanted to have an easier time creating and deploying skills. Serverless, seems to me, to solve this problem pretty well. Its straight forward and I can keep track of everything that I’ve deployed. Its easy to define all the infrastructure as code in the serverless.yml file. Linking the AWS and Alexa Skill is straightforward too. I had a great time learning this and I hope you did too!&lt;/p&gt;

&lt;p&gt;If you want to reference the code, check it out &lt;a href=&quot;https://github.com/lgarcia2/DemoAlexaSkillWithServerless&quot;&gt;on my github page&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Apr 2021 12:00:00 -0400</pubDate>
        <link>/blog/technical/AlexaSkillWithServerless</link>
        <guid isPermaLink="true">/blog/technical/AlexaSkillWithServerless</guid>
        
        <category>Alexa</category>
        
        <category>Echo</category>
        
        <category>Skill</category>
        
        <category>AWS</category>
        
        <category>Amazon</category>
        
        <category>Serverless</category>
        
        <category>Framework</category>
        
        <category>Visual</category>
        
        <category>Studio</category>
        
        <category>Code</category>
        
        
        <category>Technical</category>
        
      </item>
    
      <item>
        <title>Wyoming Coronavirus Data by County</title>
        <description>&lt;h3 style=&quot;text-align: center;&quot; id=&quot;updated-daily-at-1200-pm-eastern&quot;&gt;Updated daily at 12:00 PM Eastern&lt;/h3&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;#about-this-project&quot;&gt; Check out the details about how this was made&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Albany.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Big Horn.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Campbell.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Carbon.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Converse.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Crook.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Fremont.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Goshen.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Hot Springs.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Johnson.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Laramie.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Lincoln.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Natrona.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Niobrara.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Park.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Platte.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Sheridan.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Sublette.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Sweetwater.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Teton.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Uinta.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Washakie.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/coronavirus-metrics/wyoming/Weston.png&quot; alt=&quot;&quot; style=&quot;width:300px !important; height:200px !important;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;about-this-project&quot;&gt;About This Project&lt;/h1&gt;

&lt;h2 id=&quot;whats-shown-here&quot;&gt;What’s shown here?&lt;/h2&gt;

&lt;p&gt;These graphs show the number of COVID-19 (Coronavirus) cases that have been reported in each of Wyoming’s counties. The number of cases is reported with respect to the reporting date. With those two factors, one can see how the number of COVID-19 cases is changing over time. Here are some examples and explanations of what someone could see in these graphs.&lt;/p&gt;

&lt;h3 id=&quot;horizontal-line&quot;&gt;Horizontal Line&lt;/h3&gt;
&lt;p&gt;A horizontal line would suggest that the number of cases has not changed at all over time. This would mean that COVID-19 has been eliminated or has not been reported from the community.&lt;/p&gt;

&lt;h3 id=&quot;straight-diagonal-line&quot;&gt;Straight Diagonal Line&lt;/h3&gt;
&lt;p&gt;A straight diagonal line from the lower left hand corner to the upper right hand corner means that the number of COVID-19 cases is increasing linearly. That is, the rate of new cases is not increasing, but the rate of new cases is not decreasing. COVID-19 is still spreading, but its rate of spread is not changing. A line like this is not good news or bad news, more people are getting sick which is bad, but the rate of spread is not increasing which is good.
&lt;em&gt;Note: You may notice that all the graphs have a period with a VERY straight diagonal line. See the &lt;a href=&quot;#feb_update&quot;&gt;February Update&lt;/a&gt; section for why this occurred.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;exponential-curve&quot;&gt;Exponential Curve&lt;/h3&gt;
&lt;p&gt;A curved line starting small from the left corner and increasing more and more is a bad sign. This is an exponential curve that means that the rate of new cases is increasing over time. This means that COVID-19 is spreading more and more from day to day. This is the worst sign since it indicates that the disease is continuing to spread at a more rapid pace.&lt;/p&gt;

&lt;h3 id=&quot;flattening-curve&quot;&gt;Flattening Curve&lt;/h3&gt;
&lt;p&gt;A curved line that increases quickly but levels out is a good sign. This means that a lot of cases were reported initially but the number of new cases has slowed. This means that COVID-19 is not spreading as much. This is what we want. If it levels out completely, like the horizontal line it means that COVID-19 has been eliminated or is not being reported in the community.&lt;/p&gt;

&lt;h3 id=&quot;why-did-i-make-this&quot;&gt;Why Did I Make This?&lt;/h3&gt;

&lt;p&gt;I made this because it wasn’t shown on the &lt;a href=&quot;https://health.wyo.gov/publichealth/infectious-disease-epidemiology-unit/disease/novel-coronavirus/&quot;&gt;Wyoming Department of Health website&lt;/a&gt;, at least not at the time of writing this. The data was there, I saw it change county to county every day. You could also see these statistics from the whole state. However, I wanted to see the graphs on a per-county basis. Since this wasn’t on the website I had to make it myself.
Additionally, I wanted to learn more about AWS functionality and offerings. This would be a perfect project to dip my toes in with some other pieces of technology.&lt;/p&gt;

&lt;h2 id=&quot;how-this-was-made&quot;&gt;How This Was Made&lt;/h2&gt;

&lt;h3 id=&quot;aws&quot;&gt;AWS&lt;/h3&gt;
&lt;p&gt;Like I mentioned, I wanted to play around with more AWS pieces. I found a nice tutorial that gave me a point to start with. You can find that tutorial &lt;a href=&quot;https://aws.amazon.com/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/&quot;&gt;here&lt;/a&gt;. It seemed to mimic some of my needs well. I didn’t really need a front end for this project but I did need some of the other pieces from the tutorial.&lt;/p&gt;

&lt;h3 id=&quot;the-plan&quot;&gt;The Plan&lt;/h3&gt;
&lt;p&gt;I knew where to source my data from: the Wyoming Department of Health Website. The problem is, they didn’t provide all the data at once. If I wanted a historical perspective of the county data, I would have to store it my self. Storing the data means that I’ll need a database and to retrieve the data I’ll have to query their website. I can generate my graphs myself with the Python library ‘Matplotlib’. To deliver the graphs I decided initially it would be easy to just shoot out an email.&lt;/p&gt;

&lt;h3 id=&quot;starting-with-the-lambda&quot;&gt;Starting with the Lambda&lt;/h3&gt;
&lt;p&gt;I’m still relatively new at implementing AWS tools, so I wanted to make sure that I could get as much working as I could locally before deploying and integrating with other cloud services. So I implemented my first features on my personal computer. I ‘queried’ the Wyoming Department of Health website for data and parsed out the relevant information. I skipped the persistence of that data, since I was developing locally. However, I did use ‘Matplotlib’ to generate some graphs with the single point of data.&lt;/p&gt;

&lt;p&gt;Deploying it into the cloud was a little more troublesome. AWS didn’t natively support all of the imported libraries I was using, so I had to create a .zip deployment package to upload to AWS. For this I highly suggest installing &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;. I tried to create my own deployment package, but generating the package from the libraries on Windows was not compatible with the AWS linux environment that the lambda’s run on. Docker simplifies the whole process by spinning up the exact image AWS uses and generating the package there. A quick google will show that this is the command to generate the package with Docker.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -v path_to_project:/var/task &quot;lambci/lambda:build-python3.8&quot; /bin/sh -c &quot;pip install -r requirements.txt -t python/lib/python3.8/site-packages/; exit&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a quick rundown. ‘docker run” Run a command in a new docker container. “-v path_to_project:/var/task” Mount a volume to the container where path_to_project is the path to your project on your local machine and /var/task is the path mapped in the container. ‘/bin/sh -c “pip install -r requirements.txt -t python/lib/python3.8/site-packages/; exit”’ Run the shell command pip install and put the output in python/lib/python3.8/site-packages. This also requires that your libraries are listed in a requirements.txt file. For more information on that see documentation &lt;a href=&quot;https://pip.pypa.io/en/stable/user_guide/#requirements-files&quot;&gt;here&lt;/a&gt;. Running this whole command will dump your package in path_to_project/python/lib/python3.8/site-packages/. From there, add your python file, zip it up, and upload to AWS lambda.&lt;/p&gt;

&lt;h3 id=&quot;working-with-dynamodb&quot;&gt;Working with DynamoDB&lt;/h3&gt;
&lt;p&gt;Since I’d never worked with DynamoDB I wanted to adhere to the tutorial apply its wisdom and deviate only where necessary. With that in mind, I stuck too it. Creating the table was easy. The tutorial showed exactly how to set permissions properly and inserting the data was straightforward. I modified my lambda to insert the data from the Wyoming Department of Health website into the Dynamo database and everything seemed fine. So I let the project sit for a while and collect data while I took a break. If you need a break too, check out &lt;a href=&quot;/blog/non-technical/Motorcycle&quot;&gt;what I was doing in the mean time&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h3&gt;
&lt;p&gt;I came back to the project after about a month to finish it off. There were a couple things still on my list like querying the database for the historical data and sending out the graphs. I started at the top, querying the data. Thats where I ran into my problem. Most of my knowledge and training has come from using relational databases and I didn’t see anything in the tutorial that contradicted that viewpoint. When I created the database I followed my previous knowledge and made the primary key a unique uuid. This is where I encountered my problem. When querying for my data using dynamo db, in order to use the boto3 query command you must know the partition key (a part of the primary key). The way I designed my table, that was the least important piece of my data. 
Since I didn’t read any documentation beyond the tutorial what I failed to understand was that the database is split and sorted by a combination of the partition key and sort key. Those two keys combined create the primary key. Using those two keys you can index and sort your rows so that lookups are quicker. The primary key still has to be unique per row, but if you carefully choose what data you put in those keys, you can optimize your querying. Since I didn’t choose my keys carefully I could not optimize my data querying. Instead of using the efficient boto3 ‘query’ command, I had to use the ‘scan’ command, much less efficient. The good news is that this was a good learning experience. The bad news is that this project will have some inefficiencies in it until I pick a new database schema and migrate the data. For more information on better DynamoDB patterns see some of these pages:
&lt;a href=&quot;https://www.fernandomc.com/posts/ten-examples-of-getting-data-from-dynamodb-with-python-and-boto3/&quot;&gt;Ten Examples of Getting Data from Dynamo DB…&lt;/a&gt;
&lt;a href=&quot;https://aws.amazon.com/blogs/database/choosing-the-right-dynamodb-partition-key/&quot;&gt;Choosing the Right DynamoDB Partition Key&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;going-forward&quot;&gt;Going Forward&lt;/h3&gt;
&lt;p&gt;I reckoned with the fact that my data would need to be migrated in the future. Since this was a test project and the dataset will be small (I’m hoping) it shouldn’t be too bad. The longer the COVID-19 pandemic continues the more expensive my queries will be, so for my database’s and everyone’s sake, lets hope we can bring it to a halt.&lt;/p&gt;

&lt;h2 id=&quot;data-delivery&quot;&gt;Data Delivery&lt;/h2&gt;
&lt;h3 id=&quot;e-mail&quot;&gt;E-mail&lt;/h3&gt;
&lt;p&gt;So how will someone view this data? In other words, how will I deliver the graphs to a place where they can be viewed? My initial reaction was to send an email. Its quick, easy, and I can attach the graphs without issue. So I started down that path. I implemented the code to my lambda function and started wiring up the infrastructure. I wanted to use one of gmail’s features to use as my email server. I quickly ran into some drawbacks though. I had to provide my email and a plaintext password in the script in order to use gmail. Second, it wouldn’t even work with lambda. I don’t know the specific technical reason it wouldn’t work but its related to signing in to your account. It looked like that I had to sign in via a browser, get a cookie, and then when my script would email, google would look for that cookie or sign in token. When I deployed to AWS there was no way to ‘scriptify’ this login procedure. So I had to abandon that for another idea. The next idea was to utilize AWS’s email utility Simple Email Service (SES). It was simple enough to setup and implement but it didn’t scale for my purposes. That is, I wanted to send out this email to family members in Wyoming. With SES, I had to apply to be able to send an email to any address. Alternatively, I could send out a subscribe email first, and if the recipient accepts, then I could send the email. This is probably good in the scheme of things since it prevents a lot of spam, but it prevented me from easily delivering the data to relevant recipients.&lt;/p&gt;

&lt;h3 id=&quot;s3&quot;&gt;S3&lt;/h3&gt;
&lt;p&gt;My spouse was the one that suggested sticking it in S3. My first reaction was, “okay I could do that and it would be complex and then I’d have to figure out how to show the file from S3”. However, the more I thought about it, the easier and more correct it seemed. I didn’t have to implement any large S3 uploader code, it was built into the boto3 library. Displaying the data was easy too, I wrote a &lt;a href=&quot;/blog/technical/AWSImageHosting&quot;&gt;post&lt;/a&gt; on it! I shouldn’t dismiss ideas so quickly. 
I went forward with this idea, implemented an IAM role for S3 security, added the S3 upload, and changed the filenames of the graphs. I wanted to be sure to overwrite the files every time new data came in. This would keep my S3 bucket from getting too big and allow me to hard-link the S3 files while the data changed on the backend. What you see at the beginning of this page is the result. A series of graphs detailing the number of total cases recorded per day on a county by county basis in Wyoming.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;This was a fun and practical project for dipping your toes into the AWS landscape. I had to touch a lot of different tools and I learned a bit about each one as I went along. This was is a good project to start with, but the tutorial I followed was useful too if you’re starting. I’m glad I made mistakes along the way because it forced me to learn and I’m happy that this data is now more available to the public! You can see it on my &lt;a href=&quot;https://github.com/lgarcia2/WyomingCoronavirusMetrics&quot;&gt;github&lt;/a&gt; just note that the code will be a bit messy. Or feel free to take another look at the graphs&lt;a href=&quot;#updated-daily-at-1200-pm-eastern&quot;&gt;Check ‘em out!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;feb_update&quot;&gt;Update - February 2021&lt;/h2&gt;
&lt;p&gt;Wow, looking back on this project, I really did not expect it to run this long. Except for a period between October and December, the code is still running. During that period, the Wyoming Department of Health’s website changed slightly. This caused the function that parsed the data to fail. This meant that the data for that time period was not gathered correctly. I fixed this in December, but since the real data was not there, it had to be extrapolated between the point where it failed and when I fixed it. This is why a very straight diagonal line is present in all the graphs.
If this project were to be something more serious, hopefully I would have noticed the errors earlier. Another, better way this could have been handled would be to catch failures in the code execution and have some kind of notification sent out when failures occurred. For a simple project like this though, that much hardening didn’t seem worth it to me. I also didn’t expect to be supporting it for this long, but I am happy that I can still check it periodically to see how Wyoming is doing.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Aug 2020 14:00:00 -0400</pubDate>
        <link>/blog/technical/CoronavirusGraphs</link>
        <guid isPermaLink="true">/blog/technical/CoronavirusGraphs</guid>
        
        <category>Coronavirus</category>
        
        <category>COVID</category>
        
        <category>AWS</category>
        
        <category>matplotlib</category>
        
        
        <category>Technical</category>
        
      </item>
    
      <item>
        <title>Motorcycle Rebuild</title>
        <description>&lt;h1 id=&quot;1983-honda-shadow-vt500&quot;&gt;1983 Honda Shadow vt500&lt;/h1&gt;

&lt;p&gt;Checkout the video for the TL;DR&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/RtIxz2rLDXg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;More details below…&lt;/p&gt;

&lt;h3 id=&quot;covid-19-and-relocation&quot;&gt;COVID-19 and Relocation&lt;/h3&gt;

&lt;p&gt;In the Spring and Summer of 2020, the COVID-19 pandemic was affecting the world and my spouse and I were no exception. In order to seek some fresh air and space, we ended up spending this time in Wyoming. We were pretty comfortable in our new space but we were still a bit limited in the kinds of activities we could do so I started to look for a new project.&lt;/p&gt;

&lt;h3 id=&quot;an-old-bike&quot;&gt;An Old Bike&lt;/h3&gt;

&lt;p&gt;I started browsing Craigslist and Facebook Marketplace for a project motorcycle and started watching YouTube videos for inspiration. I saw a couple project motorcycles that didn’t work out for various reasons, but I finally found one nearby with a valid title that looked fairly decent. A seller nearby had a 1983 Honda Shadow vt 500. Unfortunately, the description of the motorcycle wasn’t very great. The person selling it received it as a part of a trade. He didn’t know what was wrong with it other than what the previous owner had stated, “A bad motor”. This isn’t usually a good sign, but I had tons of time and the price was right. The only thing I was worried about was a cracked engine block. An issue like that would be pretty difficult and expensive to fix. My spouse and I headed to the seller’s house and inspected the bike. It was in rough shape but we couldn’t see any cracks so we took it home.
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/InTruck.jpg&quot; alt=&quot;InTruck&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;starting-work-on-the-bike&quot;&gt;Starting Work on The Bike&lt;/h1&gt;

&lt;h3 id=&quot;initial-problems&quot;&gt;Initial Problems&lt;/h3&gt;

&lt;p&gt;So, what exactly did “rough shape” mean? There were a number of cosmetic issues, missing trim, small rust spots, but that didn’t concern me. What did was a box full of parts that had been taken off the bike. I had to make sense of these parts while trying to address the underlying issue of “A bad motor”. First though, the easiest problem to address was the lack of battery. Thats a pretty easy one to diagnose. First I put the key in the ignition and turned it. Nothing happened. That is pretty symptomatic of a dead battery, but it could be a fuse too. It was easy to see, though, that right where a battery should be, there was none. At this point I started making a list of things I needed at the part store. I couldn’t attempt to start it, but I could check some other simple things before heading out. I checked oil and coolant levels. As far as I saw, there was no coolant and when I checked the oil dipstick it was dry, so oil and coolant went on the list as well. 
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/IncompleteWithKiki.jpg&quot; alt=&quot;IncompleteWithKiki&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;missing-battery&quot;&gt;Missing Battery&lt;/h3&gt;

&lt;p&gt;I’ve worked on cars and small engines before so motorcycles didn’t seem that foreign to me. An engine is an engine right? Well, I was about to find out the first difference. After a trip to the store I came back and opened the box with the battery in it. There were two containers in it and some plastic tubing. In replacing the battery I learned my first difference. Car batteries are usually sealed. You buy it and can drop it right in the vehicle. This motorcycle battery came as two parts. There is what looks like the battery with lead in it, and a separate container with acid. You have to put the acid into the battery by yourself. I’d never done it before, but its not a difficult process. The instructions are pretty detailed and the steps are more or less: put the acid into the container. That being said, it is acid so if you are going to do this yourself, be sure to take the proper precautions. After getting the battery prepped, I borrowed a trickle charger from the neighbors and started charging it.&lt;/p&gt;

&lt;h3 id=&quot;oil-reveals-the-problem&quot;&gt;Oil Reveals the Problem&lt;/h3&gt;

&lt;p&gt;The next problem was the oil, pretty straightforward. Remove the plug and filter and let the oil drain. Then replace the filter and put back the plug. Finally, add oil until the proper level on the dipstick is reached. So I started and by loosening the oil plug and out came a mess. A sluggish pour of what looked like sweetened condensed milk started flowing from the hole. Well, thats a problem. My mind immediately jumped to a crack in the block, what I had feared before. A crack in the engine block can lead to coolant mixing with the oil. When that happens the oil starts to look milky, exactly what my oil looked like. All that being said, these symptoms also apply to other things so it might not be a crack in the block. It could just be a bad head gasket. That being said, both problems required the engine to be mostly disassembled. This is one of the most time consuming repairs one could do to a vehicle. I had high hopes though, maybe the bike had just been sitting for a long time and moisture worked its way in and mixed with the oil. I still wanted to try to start it up to verify that it was indeed a problem and so I could identify any other problems along the way. I replaced the oil, added some coolant and after the battery charger was done, I hooked up the battery and pressed the ignition button.&lt;/p&gt;

&lt;p&gt;The engine didn’t start, but after finding the fuel valve and turning it to the “On” position I gave it another try, and lo and behold the bike came to life! Not all was well though, it ran rough and there was smoke pouring out the exhaust. These both seemed like telling signs that I had to take it apart. I turned it off and checked the oil. Sure enough it was getting more milky.&lt;/p&gt;

&lt;h1 id=&quot;diving-in-deeper&quot;&gt;Diving in Deeper&lt;/h1&gt;

&lt;h3 id=&quot;prep-work&quot;&gt;Prep Work&lt;/h3&gt;

&lt;p&gt;Unfortunately, this was not going to be an easy fix. While I could try to rebuild the engine with just the knowledge in my head, I figured I could probably use some help. Haynes manuals are well-known in the car world for providing all the information one would ever need on a vehicle, so I started looking around for the equivalent in the motorcycle world. I found myself a used Clymer manual with all the information I would need. If you find yourself working on a motorcycle, these manuals are great. They describe how to do all kinds of repairs, they also give all the part specifications right down to the bolt. In addition to the manuals, I found a Honda Shadow forum at hondashadow.net/forums where tons of people with Honda Shadows collaborate and discuss Honda Shadow motorcycles. I posted there with my problem and the great people there confirmed my suspicions and decision to move forward in taking the engine apart.&lt;/p&gt;

&lt;h3 id=&quot;taking-it-apart&quot;&gt;Taking It Apart.&lt;/h3&gt;

&lt;p&gt;The Clymer Manual shows exactly how to take the engine out and get it apart. That being said, sometimes it doesn’t need to be followed precisely. The Honda Shadow forums had another manual available that showed the process in a different way. The Clymer manual had extra unnecessary steps so referencing two sources helped avoid unnecessary work. I won’t go into too much detail, the manual can be reference for that, but these are the things I had to remove in order to get the engine out. I started with the seat and fuel tank. These were easy because both were missing bolts that hold them in. There is an air tube under the tank that connects the air filter box to the carburetor that popped off right after. I disconnected the throttle and choke cables that connected to the carburetor and removed it. 
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/IncompleteBike_1.jpg&quot; alt=&quot;WithoutCarb&quot; /&gt; Next, I drained and removed the radiator and hoses. I had to remove the rear tire before I could remove the exhaust. Both came off easy. After that were just small trim pieces the shift lever and the rear brake lever. Finally, I placed wood blocks under the engine, took off the sub-frame, and removed the engine mounting bolts from the engine. It took a little wiggling but it came free after a bit. &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/EngineOff.jpg&quot; alt=&quot;EngineOff&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;focusing-on-the-engine&quot;&gt;Focusing on the Engine&lt;/h3&gt;

&lt;p&gt;With the engine free, I could now move on to taking it apart and looking for any coolant leaks into the engine. Most pieces came off easily and as the manual described but I did end up rounding the 12mm socket I was using on some really stuck bolts. There was also another small hidden bolt on each cylinder head that was not described in the manual. If your cylinder heads seem stuck, be sure to check for extra bolts. &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/ValveCoverOff_7.jpg&quot; alt=&quot;ValveCoverOff_7&quot; /&gt; With the heads and cylinders off I immediately saw the problem. The good news is that it wasn’t a crack in the block, or a blown head gasket. The bad news is that it was a hole right in the middle of the rear cylinder. &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/Piston_2.jpg&quot; alt=&quot;HoleInPiston2&quot; /&gt; &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/Piston_5.jpg&quot; alt=&quot;HoleInPiston5&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-real-problem&quot;&gt;The Real Problem&lt;/h3&gt;

&lt;p&gt;A hole in the cylinder isn’t a very common problem. Ultimately, it turned out it was gasoline, not coolant, that was turning the oil milky. Gasoline was entering the combustion chamber, it was not being compressed properly, and who knows if it was even igniting. It does explain the engine running rough though. It is a little odd that something like that happened. The only reasons I could think of were if a foreign object entered the combustion chamber or if it maybe got to hot and weakened the metal. These days ethanol is added to some gasoline so maybe the engine got too hot and melted a hole in the piston. This is all just speculation, without being there its hard to determine the actual cause. I could have potentially identified this issue earlier if I had a compression tester, but the outcome would have been the same. In any case, I had to take apart the engine even more to collect the metal parts of the cylinder that had broken off. I cant have metal bits flying around causing more damage. Before doing that though, I ordered a new piston, piston rings, and gaskets from Ebay.&lt;/p&gt;

&lt;h1 id=&quot;fixing-the-issue&quot;&gt;Fixing The Issue&lt;/h1&gt;

&lt;h3 id=&quot;waiting-for-parts&quot;&gt;Waiting for Parts&lt;/h3&gt;

&lt;p&gt;COVID-19 definitely interrupted a lot of the day to day infrastructure we rely on, so shipping was a little slow. In the meantime I could still identify and fix other problems with the bike. First, I removed all the small metal fragments that remained from the hole in the piston. &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/Debris.jpg&quot; alt=&quot;Debris&quot; /&gt;After that I took apart, cleaned and rebuilt the carburetor. It seemed mostly clean on the inside but it was comforting to know that it wouldn’t be a problem. Not only that, but it looked a lot better on the outside after cleaning. The fuel line needed replacing too, it was pretty stiff and cracked. I also started getting into the box of parts. I mostly tried to identify where they belonged, attaching them now would get in the way when I had to put the engine back in. It was a good time to address the front brakes though, they were pretty spongy. The brake fluid was a little low, so I added more and bled the system. I also tried to sort out the electrical system a little bit, there was a mess of wires up front and in the rear. I mounted the front headlight and verified it worked. The last and most time consuming thing I did was cleaning off old gasket material. The material was stuck on pretty well so the task ended up being a bit tedious, but the old material slowly came off.&lt;/p&gt;

&lt;h3 id=&quot;replacing-the-piston-and-engine-reassembly&quot;&gt;Replacing the Piston and Engine Reassembly&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/Piston_7.jpg&quot; alt=&quot;Piston7&quot; /&gt;
After the packages with the piston and gaskets arrived I got to work. First, I tackled the piston. I made sure to balance the new piston with the old functioning one so that I wouldn’t throw off any engine balance. There are some good YouTube tutorials on this, but its pretty straightforward. Drill a series of small dents until the pistons weigh the same. These dents should definitely be small though, don’t drill deep and don’t drill through anything. Its best make these dents where the material is thick too. The goal is to shave off material not to put holes in things. Once that was done, removing and replacing the broken piston with the new one was easy. I just removed a retaining clip and slid the old piston off. To put on the new one, I oiled up any surfaces that touched and moved, I put on the rings, slid it on the connecting rod, and put back the retaining clip. If it weren’t for the whole engine removal and disassembly, it would have been easy! &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/Piston_8.jpg&quot; alt=&quot;Piston8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next came reassembling the engine. The book was a great help here. I replaced the gaskets, assembled the parts, and torqued everything to specification. I did stumble a little bit when it came to the timing chain though. I set the camshaft, timing, and lifters easily on the front cylinder but the when it came to the rear cylinder, things just wouldn’t seat right. It seemed like the chain was too small or under too much tension and I couldn’t fit it onto the camshaft. Setting the timing correctly was out of the question. I had to disassemble almost the whole rear cylinder again to figure out the problem. It turned out to just be a kink in the chain that was a bit stuck so I made sure to lubricate the chain well. Other than that, reassembly went by the book.&lt;/p&gt;

&lt;h3 id=&quot;mounting-the-engine&quot;&gt;Mounting the Engine&lt;/h3&gt;

&lt;p&gt;Now that the it was back together, I wanted nothing more than to start the engine to see if I had corrected the problem. Unfortunately, I lacked the tools and equipment to test the engine by itself so I had to reassemble the whole motorcycle to test it. With the disassembly process still fresh in my mind, and with the book by my side, this went much faster. First, I had to fit it back in the frame. Mounting and un-mounting the engine from the frame were probably the hardest parts. There wasn’t an easy way for me to lift and adjust the engine. I was working with wood boards and a floor jack so getting it in just the right spot was a little difficult. Getting help from my spouse made the process go easier, but doing this with three people might be even better.&lt;/p&gt;

&lt;p&gt;From there it was just disassembly in reverse. I put on the radiator and connected the hoses. The driveshaft (not a chain like most motorcycles) was a little difficult to line up and put on. Putting on the exhaust was simple but took some muscle and it was a dirty job. There were a load of electrical connections that needed to be made but I focused mainly on the ones just related to the engine. I tried not to put everything back, since I just needed to test if the engine ran, so I left a lot of things off for now. Some pieces like the clutch lever and gearshift weren’t essential but would also be good to test worked. I hooked up the fuel system and air-box by the book. I wanted to make sure that if I did run into problems, those two systems wouldn’t be variables. I finally mounted the fuel tank and was ready to start it up.&lt;/p&gt;

&lt;p&gt;Ignition! Well, not quite at first. The engine needs to be in neutral to start, so I had to shift it a little. The fuel petcock was also in the off position so no fuel was flowing, I forgot again. Finally, the engine kill switch was in the off position. After that and after a few cranks to get the carburetor primed, it started up and ran!&lt;/p&gt;

&lt;h3 id=&quot;more-things-to-fix&quot;&gt;More Things to fix&lt;/h3&gt;

&lt;p&gt;With the engine sorted out, I could now pay attention to all of the other problems. Off the top of my head were a couple things. The exhaust was smokey, the engine sounded ‘click-y’, the clutch and shifting felt odd, all of the unmounted parts needed mounting, The junction box looked horrible, there were no turn signals, and a good clean was in order.&lt;/p&gt;

&lt;p&gt;I started with the engine and did a lot of reading in the manual. Incorrect valve clearances seemed to explain both of the engine problems. The problem was that I remember setting them correctly when I assembled the engine in the first place. After verifying the clearances again, I noticed my problem. I set the clearances to 1mm when it should have been 0.1mm. Luckily, I didn’t need to take apart the engine for that. Its a bit tight, but there are some convenient valve covers that can be taken off to perform the necessary adjustment. That solved the clicking problem, but the exhaust was still smokey. I’d address the smokey exhaust later the cause and fix seemed easy enough for future me to solve. I’m in a high altitude area so I figured the problem could be related to the air fuel mix. Another thought was that the fuel could be bad. I had only used the fuel that came with the bike and I did not know its history. Whoops!&lt;/p&gt;

&lt;p&gt;The clutch problem was next. I started with the simplest idea, adjusting the cable. After fiddling with a couple different adjustments, it didn’t seem to help. I figured something must have gone wrong in installation. More reading I guess. I read through the clutch portion of the manual and prepared myself to tackle the engine again. Luckily, I didn’t have to remove the engine to address the clutch, but I did have to remove a lot of those parts again. The exhaust, radiator, and sub-frame had to come off, but other than that it wasn’t too bad. Maybe I was saying that because I’d already done it once. After the sub-frame came off I drained the oil and removed the clutch cover and saw my problem. The clutch is held in place by a spring plate with four bolts going through it. Although I remember torquing it to spec, it must not have been enough because one of the bolts was more loose than the rest. &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/Clutch_2.jpg&quot; alt=&quot;Clutch2&quot; /&gt;This was the issue for sure. So I made sure to follow the manual to the letter and I torqued the bolts in a star pattern in three sequences. I also made sure to reference pictures and tutorials online so that I was sure everything went well this time. My guess is that since these bolts are on springs, I tightened one slightly more than another out of sequence and the loose one was more free to move. Regardless, after I reassembled everything, this solved the clutch problem and it felt great after an adjustment. I’m still not great at shifting motorcycles, but at least I know that’s a problem with me not the bike.&lt;/p&gt;

&lt;p&gt;The only things left were cosmetic! I put everything on that I needed to ride safely around the block and took it for a spin. It was great to finally enjoy the fruits of my labor, even just for a bit. There was still more to to fix though. Around this time we also relocated from one corner of the state to another. I packed up the bike and its parts and we headed out.&lt;/p&gt;

&lt;h1 id=&quot;simpler-problems&quot;&gt;Simpler Problems&lt;/h1&gt;

&lt;h3 id=&quot;a-new-problem-appears&quot;&gt;A New Problem Appears&lt;/h3&gt;

&lt;p&gt;We ended up at my parents house for a visit. My parents and I had talked about the bike a lot on the phone and they were curious about it. Once we got it unpacked we started it up and took a few spins around the block. It was a fun time, but it pretty quickly showed another problem, a cooling problem. The engine overheated at the end of our journey and ended up spitting some coolant out the overflow. Well, add that problem to the pile. On a positive note, at my parents house I had a lot more tools and equipment to work with. My Dad’s worked on cars before too so bouncing ideas off him was a great help. After some diagnosis, we thought it was the coolant temperature sensor not sending the ‘turn on’ signal to the cooling fan. So I ordered that sensor in addition to some new turn signals, a fender, a horn, and a new junction box. The old junction box worked fine, but it was missing a cover and was a bit sketchy looking. It might have even been a safety hazard to touch.&lt;/p&gt;

&lt;h3 id=&quot;the-easy-fixes&quot;&gt;The Easy Fixes&lt;/h3&gt;

&lt;p&gt;The fender was easy, just putting it where it was supposed to go and finding some new bolts. The horn was also easy. I had to fabricate a bracket since it wasn’t the stock horn, but it fit fine and wired up easily. The junction box was simple but a bit time consuming. I had to take off all the electric plugs and plug them back in to the correct spot on the new box. The plugs were stiff so I had to get a little creative but the process was not complicated. &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/JunctionBox_1.jpg&quot; alt=&quot;JunctionBox1&quot; /&gt; &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/JunctionBox_2.jpg&quot; alt=&quot;JunctionBox2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also wanted to fix the smokey exhaust. I figured it would be best to start with the carburetor. I referenced the manual more, watched some YouTube videos, and finally decided to take another stab at it. At the end of the day, I used what the manual suggested for high altitude as a baseline, but fiddled a little more with the carburetor settings in order to get it right. I still might play with it again someday because the air fuel mixture still seems a little lean. However, problem solved! The smokey exhaust is gone.&lt;/p&gt;

&lt;h3 id=&quot;electrical-woes&quot;&gt;Electrical Woes&lt;/h3&gt;

&lt;p&gt;The turn signals arrived, and I knew there was a problem when I opened them. They had two wires to control the light, where the single signal in my possession had three wires. I should have checked before I bought them, but I thought all turn signals were more or less the same. I read a bit online about turn signals though and these seemed like they would be fine. There wouldn’t be a constant on setting for the signals, but that seemed okay to me. Tackling the electrical was a bit difficult though. There were wires everywhere, none with connectors and none labeled. I started going through them one by one referencing the wiring diagram in the manual. There were a couple issues to fix with the brake light. The switch for the front brakes had a broken contact. Getting a new switch was going to be expensive so instead I modified and added a new contact to the existing one over a couple hours. Getting all the tiny switch pieces to line up took a lot of patience. The rear brake light switch was triggered by a spring so I had to find a suitable spring for it to function. Once I resolved both these problems it was pretty satisfying to watch that brake light turn on and off. Sometimes, its the little things that keep you going. Now, with everything labeled, the turn signals seemed easy to wire up, I just left off the wires for the constant on setting. The only unfortunate part was that the signals did not flash. They were either on or off. The relay was broken so it was off to the parts store to find another. The broken relay was a three contact relay so I got a similar three contact relay. I put it in place, hooked up the wires and nothing. &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/TurnSignalRelay.jpg&quot; alt=&quot;TurnSignalRelay&quot; /&gt; Maybe the contacts were different on this relay. I tried all the combinations, but nothing worked right. I tried rewiring the turn signals and that didn’t work either. It was by happenstance that I didn’t hook up one of the wires onto the relay and that was the trick. I’m still not sure why it was wired that way. It was frustrating to have had to go through all that but the reward was working turn signals. I made sure to label and write down everything I found. I didn’t want to go through that wiring again.&lt;/p&gt;

&lt;h3 id=&quot;cooling-mistakes-and-fixes&quot;&gt;Cooling Mistakes and Fixes&lt;/h3&gt;

&lt;p&gt;The final problem was cooling. The temperature sensor came in, but getting to it was a problem. It was nestled in a place that was difficult to reach. It was attached to the thermostat housing and I could could not get a wrench in the tight space. I could get a socket in there but the sensor was too long for the shallow socket I had. Ultimately, it had to come apart enough so that a wrench could fit. &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/CoolantCap.jpg&quot; alt=&quot;CoolantCap&quot; /&gt; What seemed like a simple replacement took a couple hours unfortunately. To make things worse, that turned out not to be the problem. The sensor sends a signal to the fan switch which turns on the fan when it gets to a certain temperature. It turned out the fan switch was bad. &lt;a href=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/FanSwitch.jpg&quot;&gt;FanSwitch&lt;/a&gt; The good news, is that we identified the problem and knew the fix. The bad news is, its another part that needs replacing. I chose another fix though. The switch should probably be replaced at some point, but instead of replacing it, I chose to short the switch. That is, I chose to bridge the two switch contacts so that the switch was always in the ‘on’ position.  This means that the fan will remain on all the time, even when the engine is cool. It might need some time to warm up on chilly days, but it prevents the engine from overheating. I fashioned a nice little wire that could be removed when the switch is eventually replaced. Finally, the bike was finished!&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;I’ve taken the bike on a lot more spins around the block. I still haven’t got my Motorcycle licence endorsement so I can’t go on longer journeys, but its been a great time! This project taught me about almost every part on a motorcycle. The only thing that didn’t need fixing were the front forks and the dials. There’s a couple things I’d still want to do at some point. I’d like to fix that cooling fan switch, probably give it a paint job, and find more trim pieces. However, I think I’d feel pretty confident looking at most other motorcycles out there now, especially with a manual in hand. I would highly recommend anyone fixing a motorcycle to get a shop manual. It helped me with everything that had to be done. It was a fun project to do while I had the time and riding it after all the hard work is one of the best feelings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/Complete/DSC_0783.JPG&quot; alt=&quot;Complete1&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/Complete/DSC_0784.JPG&quot; alt=&quot;Complete2&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/Complete/DSC_0789.JPG&quot; alt=&quot;Complete3&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/Complete/DSC_0793.JPG&quot; alt=&quot;Complete4&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/Complete/DSC_0797.JPG&quot; alt=&quot;Complete5&quot; /&gt;
&lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/non-technical/2020-08-02-Motorcycle/Complete/DSC_0817.JPG&quot; alt=&quot;Complete6&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 02 Aug 2020 17:00:00 -0400</pubDate>
        <link>/blog/non-technical/Motorcycle</link>
        <guid isPermaLink="true">/blog/non-technical/Motorcycle</guid>
        
        <category>1983</category>
        
        <category>Honda</category>
        
        <category>Shadow</category>
        
        <category>500</category>
        
        <category>Motorcycle</category>
        
        
        <category>Non-Technical</category>
        
      </item>
    
      <item>
        <title>Image Hosting with AWS</title>
        <description>&lt;h2 id=&quot;new-website-new-problems&quot;&gt;New Website, New Problems&lt;/h2&gt;

&lt;p&gt;I’m hosting this latest version of my website using Jekyll in combination with Github Pages. If you want to know more about that process you can read my post on that &lt;a href=&quot;https://luisgarcia.me/blog/non-technical/NewBlogWhoThis&quot;&gt;here.&lt;/a&gt; Its been great! I’ve still not been contributing as much as I’d like, but I am contributing more! Along with new content, I’m also able to create and deploy site design changes with just as much speed. One of those changes is how I’m hosting the images in the background at the top of the page.&lt;/p&gt;

&lt;p&gt;Originally, I only used one background image for my website, the one with four couches and a girl. I wanted was to be able to show off more of my photos, so I added the images and a little javascript to randomize when they appeared. Job well done right? Well, there are a couple problems. First, I use a reasonably decent (read: nice for 2015) camera and its images can be quite large. For that matter, media files in general, depending on quality and compression, can be quite large. Since I’m using Github to host my website, I may &lt;a href=&quot;https://help.github.com/en/github/managing-large-files/what-is-my-disk-quota&quot;&gt;run into their size restrictions&lt;/a&gt; if I store too many photos. Second, Github is generally used to store code repositories. Using it as a website hosting platform is a nice feature but those two pieces of functionality don’t alway agree on how to do things. Github and other repositories are not &lt;em&gt;generally&lt;/em&gt; the ideal place to host images. Third, every deployment with an image change can take a long time to upload to the Github server.&lt;/p&gt;

&lt;p&gt;For my initial implementation, I was lucky enough to have the option to host my images in Github, but that needed to change.&lt;/p&gt;

&lt;h2 id=&quot;my-first-idea&quot;&gt;My First Idea&lt;/h2&gt;

&lt;p&gt;AWS costs money, and I didn’t want to pay. I wanted my cake and to eat it to, that is, I wanted my images to be hosted somewhere but I wanted to have strong control over those images and my IP (intellectual property). I probably could have used Imgur, Flickr, or maybe even Instagram as free public solutions to host my images. I didn’t like the inherent public nature of image hosting on the platform. For my pictures with my friends, sure they’re great. Vacation pictures, awesome! For storing my amateur photography? No way. &lt;img src=&quot;https://s3.us-east-2.amazonaws.com/luisorlandogarcia.com-images/technical/AWSImageHosting/WeirdAl_Foil.webp&quot; alt=&quot;Protected GIF&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I tried using a private or even public album with Google Photos, but it seems Google has gotten wise and discourages direct links to photos. It seems like some companies may have come up with ways to get around this, but most of those seemed like hack-y solutions.&lt;/p&gt;

&lt;p&gt;In the end, my desire to control my images was more powerful than my desire for free solutions, but AWS S3 bucket hosting, in this case, was cheap enough for me.&lt;/p&gt;

&lt;h2 id=&quot;enter-aws&quot;&gt;Enter AWS&lt;/h2&gt;

&lt;p&gt;I’m sure there are a ton of ways to configure AWS resources, store your images, and grant access to them. However, I think this method is probably the simplest and most straightforward. I chose to upload my photos to a certain directory in an S3 bucket and grant public read access to that bucket.&lt;/p&gt;

&lt;p&gt;Breaking this down a bit, these are the steps that I needed to host images from AWS and use them on this site.
    1. Login and Create an S3 Bucket
    2. Configure the S3 Bucket
    3. Upload Photos
    4. Modify Website to Link to Photos&lt;/p&gt;

&lt;h2 id=&quot;step-1---login-and-create-an-s3-bucket&quot;&gt;Step 1 - Login and Create an S3 Bucket&lt;/h2&gt;

&lt;p&gt;If you don’t have an AWS account, its pretty easy to create one. Just go to &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;https://aws.amazon.com/&lt;/a&gt;, click “Create an AWS Account” and follow the instructions. You will have to enter credit card information to cover any costs that you incur with any of the resources you use. If you’re concerned you can look at AWS’s pricing information for more on this. I havent been charged yet and its been a couple months but I’m only using one S3 Bucket with a total of less than 40 MB. After you’ve created your account, or if you already have one, log in and get to the AWS Console.&lt;/p&gt;

&lt;p&gt;From there, under AWS services, you can search in the box for “S3” and click the link. Alternatively you can find and click the link under &amp;gt; All Services &amp;gt; Storage &amp;gt; S3. From there it should be pretty easy to find the button with the label “Create Bucket”. Once clicked the “Create bucket” dialogue will appear. Choose a good name for the bucket, AWS has some good information on this if you click the little (i) icon next to “Bucket name” in this dialogue. I named mine luisgarcia.me-background-images for reference. You’ll also need to pick a region for it, this is worth looking into if your new to AWS but for now just pick the region closest to you. Once those two things are filled out, we’ll just accept the default settings on all the other pages, so keep clicking next until you’ve created your bucket. Now we can start configuring it!&lt;/p&gt;

&lt;h2 id=&quot;step-2---configure-the-s3-bucket&quot;&gt;Step 2 - Configure The S3 Bucket&lt;/h2&gt;

&lt;p&gt;Once you have the bucket go ahead and click it! This will take you to the bucket overview where you have a lot of control over your bucket. Right now, lets skip the “Overview” tab, it deals a lot with whats inside the bucket. While thats very important, I usually like to save it until the bucket is configured that way I don’t expose any sensitive data accidentally and I can remove the bucket easily if things change. A lot of the settings and confguration values we are about to change could have been chaged from the bucket creation dialog. I think its probably more important to configure a bucket once its already created though. In a bucket’s lifetime it can only be created once but its configuration could be changed any time you want.&lt;/p&gt;

&lt;p&gt;We’ll go ahead and click the ‘Properties’ tab next. Once you’re in there, click ‘Static website hosting’ accept the defaults and click save. Similar to our Github pages, we can use buckets for static website hosting. For our purposes though, since we just want image hosting we’ll use this functionality too.&lt;/p&gt;

&lt;p&gt;After that click the ‘Permissions’ tab. This is where we’ll allow read access to our bucket. Its pretty important to get this right, so if you’re not comfortable read up a bit more on AWS S3 bucket permissions. In the permissions tab, click the “Bucket Policy” button which will open the Bucket policy editor. This is where you can copy and paste the following JSON. Be sure to change &lt;code&gt;&amp;lt;bucketname&amp;gt;&lt;/code&gt; to the name of your bucket.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &quot;Version&quot;: &quot;2012-10-17&quot;,
    &quot;Statement&quot;: [
        {
            &quot;Sid&quot;: &quot;AllowPublicRead&quot;,
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Principal&quot;: {
                &quot;AWS&quot;: &quot;*&quot;
            },
            &quot;Action&quot;: &quot;s3:GetObject&quot;,
            &quot;Resource&quot;: &quot;arn:aws:s3:::&amp;lt;bucketname&amp;gt;/*&quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This JSON is telling AWS to create a policy named “AllowPublicRead” that grants the “GetObject” action on this S3 bucket to all resources. This policy is applied to all objects in the bucket, designated by the resource &lt;code&gt;arn:aws:s3:::&amp;lt;bucketname&amp;gt;/*&lt;/code&gt;. If you wanted to just allow public read to a specific directory you could change this to &lt;code&gt;arn:aws:s3:::&amp;lt;bucketname&amp;gt;/specificDirectory/*&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-3---upload-photos&quot;&gt;Step 3 - Upload Photos&lt;/h2&gt;

&lt;p&gt;This is an easy one, go back to the “Overview” tab, click upload, and pick the files you want in the bucket. I’m using images, but you could put anything here. Notably, since we configured it to be publicly accessible, anything you put there can be accessed publicly.&lt;/p&gt;

&lt;h2 id=&quot;step-4---link-to-photos&quot;&gt;Step 4 - Link to photos.&lt;/h2&gt;

&lt;p&gt;Since we configured our bucket for static website hosting earlier it should be pretty easy to link to our files, or images in my case. AWS has a pretty standard way of creating url’s from buckets. This can be changed if you want, but we’ll use the default since I already have my real website somewhere else. Anyway, our photos should be avaliable at &lt;code&gt;http://&amp;lt;bucketname&amp;gt;.s3-website.us-east-2.amazonaws.com/&amp;lt;directory&amp;gt;/&amp;lt;filename&amp;gt;&lt;/code&gt;, note replace &lt;code&gt;&amp;lt;bucketname&amp;gt; &amp;lt;directory&amp;gt; and &amp;lt;filename&amp;gt;&lt;/code&gt; with your relevant values. If you’re still having trouble seeing your files, check the properties tab again and click Static website hosting. Your website url should be at the top of the box that pops up.&lt;/p&gt;

&lt;p&gt;Once we have these links, you can alter the HTML in your other site to link to these new images and there we have it! Image hosting with AWS!&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;I like this solution for the control I get over the objects, its relatively low cost, and low complexity. If one doesn’t have an AWS account, I’m sure you could do the same on the Google Cloud Platform or with Azure, other ‘cloud’ providers. I don’t like that its not free, but its a cost I can accept. Going forward, one thing I’d like to validate is the performance of loading theses images from a different place. I generally trust in the uptime and availability of the platforms hosting Github Pages and AWS S3 but it is possible that in certain cases the loading of either the site or the images could differ. Regardless I believe in the solution and I’m happy with it. This method is how I’m loading all the images you see at the top of the page so you can evaluate the solution in real time!&lt;/p&gt;

</description>
        <pubDate>Sun, 08 Mar 2020 14:00:00 -0400</pubDate>
        <link>/blog/technical/AWSImageHosting</link>
        <guid isPermaLink="true">/blog/technical/AWSImageHosting</guid>
        
        <category>AWS</category>
        
        <category>Image</category>
        
        <category>Hosting</category>
        
        <category>Github</category>
        
        <category>Pages</category>
        
        <category>Jekyll</category>
        
        
        <category>Technical</category>
        
      </item>
    
      <item>
        <title>How to Watermark All Your Photos</title>
        <description>
&lt;p&gt;In looking at images across the internet, an reocurring element that appears in many of them is a watermark. If you’re unfamiliar with the concept, a watermark is a small design or text added to an image. The purpose behind a watermark is to visibly mark a the image to provide the creator with proof of ownership. For instance, if I mark my photos with my name and someone else downloads the image and uses it, its clear who the photo belongs to and who the original creator is. A watermark’s effectiveness is debatable. Depending on the watermark, it can be sometimes be easily cropped off. There’s also software out there designed to explicitly remove watermarks. However, leaving a watermark on an image does offer at least some security when exposing your images to the internet. In this post, I’ll describe an easy way to add a watermark to an image, and a way to automate the process so that watermarks can be added &lt;em&gt;en masse&lt;/em&gt; to a large number of photos in a short period of time.&lt;/p&gt;

&lt;h2 id=&quot;ffmpeg&quot;&gt;FFmpeg&lt;/h2&gt;

&lt;p&gt;The tool I’ll be using to help us along is &lt;a href=&quot;https://ffmpeg.org/&quot;&gt;FFmpeg&lt;/a&gt;. We’ll only be using it to manipulate our images, but its great open source tool if you want to for other things like video and audio processing. Its a very powerful and versitile tool and I highly recommend it for media processing.&lt;/p&gt;

&lt;h2 id=&quot;other-requirements&quot;&gt;Other requirements&lt;/h2&gt;

&lt;p&gt;In addition to FFmpeg, you’ll need at least two images, an image that you want to apply a watermark to and the watermark image itself. When designing the watermark image some things to consider are size, color, and transparency. For my watermark image, I just chose my name set at an angle. Additionally, I made sure that the background of the watermark image was 100% transparent. The transparency should allow the watermark to be seen, but the original image can still be mostly intact.&lt;/p&gt;

&lt;h2 id=&quot;simple-overlay&quot;&gt;Simple Overlay&lt;/h2&gt;

&lt;p&gt;Running the following command in a shell will use FFmpeg to do a simple overlay, placing the watermark image on top of the original image&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ffmpeg.exe -i &quot;originalImage.png&quot; -i &quot;watermarkImage.png&quot; -filter_complex &quot;[0:v][1:v] overlay=main_w-overlay_w:main_h-overlay_h&quot; &quot;outputImage.png&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting image is a combination of the original image and the watermark. We’ve accomplished our goal. Now lets go into what the command is actually doing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ffmpeg.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an easy one, we’re calling the executable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-i &quot;originalImage.png&quot; -i &quot;watermarkImage.png&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;these two arguments assign the paths to the original image and the watermark image to the first and second inputs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-filter_complex &quot;[0:v][1:v] overlay=main_w-overlay_w:main_h-overlay_h&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the argument suggests, this is a complex one to explain. “filter_complex” is an argument that describes various filters to use through FFmpeg. You can read more about it &lt;a href=&quot;https://ffmpeg.org/ffmpeg-filters.html#Description&quot;&gt;here&lt;/a&gt;. Lets break this specific filter down though. The first things we must do is declare the inputs to the filter. In our case we’re using our two source images. The way to declare our inputs to the filter is with the square brackets. [0:v] is stating that we should use the “zero’th” or first input, our original image, and we should use the visual portion, or “video stream” from it. [1:v] is similar, only this time we’re using the second input, the watermark image. These two images will be passed to the “overlay” filter. Finally, the last piece after the “=” symbol states that the watermark’s top left corner should be placed at the point determined by two formulas. “main_w - overlay_w” determines the “x” position, where main_w is the width of the first input and overlay_w is the width of the watermark image. The “y” position is determined in a similar way. I chose to place my image in the lower right hand corner, but by manipulating these arguments the watermark can appear anywhere on the original image. For example “overlay=0:0” will place the watermark in the top left of the original image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;outputImage.png&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, the last argument is the path to the output image. This tells FFmpeg where to write your output file. If a file already exists there, FFmpeg will ask you if you want to overwrite it. If you dont want to be prompted for this question, you can just use the “-y” flag to always overwrite and “-n” flag to never overwrite.&lt;/p&gt;

&lt;h2 id=&quot;making-a-better-watermark&quot;&gt;Making a Better Watermark&lt;/h2&gt;

&lt;h3 id=&quot;transparency&quot;&gt;Transparency&lt;/h3&gt;

&lt;p&gt;My watermark started as an opaque image, that is, originally the text in my image was not transparent. A nice feature of watermarks is their transparency, it maintains the idea of marking an image as your own while also preserving as much of the image as possible. Fortunately FFmpeg offers a way for us to do that too, we can just add another filter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1:v]colorchannelmixer=aa=0.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This filter will take our watermark image and make it 50% transparent. Putting it all together we can use this command to generate our new image&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ffmpeg.exe -i &quot;originalImage.png&quot; -i &quot;watermarkImage.png&quot; -filter_complex &quot;[1:v]colorchannelmixer=aa=0.5[opacity];[0:v][opacity]overlay=main_w-overlay_w:main_h-overlay_h&quot; &quot;partialTransparentWatermark.png&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command may look a little different than expected. Using FFmpeg’s filter_complex, we can do multiple filter operations as long as we keep track of our streams. That is, now that we’ve created an video stream that is 50% transparent, we have to pass that transparent stream onto our overlay filter. I choose to keep things straight by naming the outputs of each filter result, in this case I named the output of my transparency “[opacity]”. There are other ways to pass around streams, for more information, again you can look at the &lt;a href=&quot;https://ffmpeg.org/ffmpeg-filters.html#Description&quot;&gt;filter documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;consistency&quot;&gt;Consistency&lt;/h3&gt;

&lt;p&gt;So far we’ve done a great job watermarking our one image. However, if we continue to use the previous command on our images a problem will emerge. The watermark will appear to grow and shrink relative to the size of the image we’re watermarking. That is, if our watermark is 100x100 and we put it on a 200x200 image, the watermark will take up the bottom right quarter of the original image. If our original image is 400x400 and we use the same 100x100 watermark, then it will take up the bottom right sixteenth of the image. One solution is to create a new watermark for every image size. That does seem to get tedious very quickly. Instead lets use FFmpeg to create a more consistent watermark across all image sizes. Unfortunately, there’s not an easy way to scale an image based on the size of another image in one command. We must detect the height and width of the original image so we can scale the watermark appropriately. Fortunately, included with FFmpeg is their ffprobe program, used to gather information about a piece of media. We’ll use it to get the size of our original image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ffprobe.exe -i &quot;originalImage.png&quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will result in an output that looks like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ffprobe version 4.1.3 Copyright (c) 2007-2019 the FFmpeg developers
 built with gcc 8.3.1 (GCC) 20190414
 configuration: –enable-gpl –enable-version3 –enable-sdl2 –enable-fontconfig –enable-gnutls –enable-iconv –enable-libass –enable-libbluray –enable-libfreetype –enable-libmp3lame –enable-libopencore-amrnb –enable-libopencore-amrwb –enable-libopenjpeg –enable-libopus –enable-libshine –enable-libsnappy –enable-libsoxr –enable-libtheora –enable-libtwolame –enable-libvpx –enable-libwavpack –enable-libwebp –enable-libx264 –enable-libx265 –enable-libxml2 –enable-libzimg –enable-lzma –enable-zlib –enable-gmp –enable-libvidstab –enable-libvorbis –enable-libvo-amrwbenc –enable-libmysofa –enable-libspeex –enable-libxvid –enable-libaom –enable-libmfx –enable-amf –enable-ffnvcodec –enable-cuvid –enable-d3d11va –enable-nvenc –enable-nvdec –enable-dxva2 –enable-avisynth
 libavutil      56. 22.100 / 56. 22.100
 libavcodec     58. 35.100 / 58. 35.100
 libavformat    58. 20.100 / 58. 20.100
 libavdevice    58.  5.100 / 58.  5.100
 libavfilter     7. 40.101 /  7. 40.101
 libswscale      5.  3.100 /  5.  3.100
 libswresample   3.  3.100 /  3.  3.100
 libpostproc    55.  3.100 / 55.  3.100
Input #0, image2, from ‘originalImage.jpg’:
 Duration: 00:00:00.04, start: 0.000000, bitrate: 103560 kb/s
   Stream #0:0: Video: mjpeg, yuvj444p(pc, bt470bg/unknown/unknown), 2400x953 [SAR 300:300 DAR 2400:953], 25 tbr, 25 tbn, 25 tbc&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thats a lot to take in! Fortunately, we don’t need all of it. All we need is a tiny bit at the end. The resulting outpus shows Input #0 has a video stream, Stream #0:0, and its resolution is 2400x953. As with the other commands, we can simplify this one too.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ffprobe.exe -i &quot;originalImage.png&quot; -v error -hide_banner -select_streams v:0 -show_entries stream=width,height -of default=nw=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will get straight to the point and give us our width and height of this form:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;width=2400
height=953&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bringing it all back together, we use the original width and height as a base to ensure our watermark is 25% of the size of the original image. This will result in the watermark taking up 1/16 of the original image. The original image does have a weird size though, so lets try to maintain the aspect ratio of our watermark as its applied, rather than distort the watermark image. &lt;em&gt;A quick note here, there are other strategies that could be used here to provide other definitions of “consistent watermark”. I’m choosing to preserve the aspect ratio of the watermark at the expense of the inconsistencies in the height of the watermark. Another strategy could be to apply a standard scale to the both the watermark’s height and width, that could result in a stretched look of the watermark if the aspect ratio of the two images does not match.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I used ffprobe again to find out my watermark’s size is 640x480&lt;/p&gt;

&lt;p&gt;Width Scale  = (640/480) * 2400 * .25 = x
Height Scale = (640/480) * 953 * 0.25 = y&lt;/p&gt;

&lt;p&gt;Width Scale  = (2400/953) * 640 * 0.25 = 402
Height Scale = (2400/953) * 480 * 0.25 = 302&lt;/p&gt;

&lt;p&gt;We can then use these values in our ffmpeg command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ffmpeg.exe -i &quot;originalImage.png&quot; -i &quot;watermarkImage.png&quot; -filter_complex &quot;[1:v]scale=402:302,colorchannelmixer=aa=0.5[opacity];[0:v][opacity]overlay=main_w-overlay_w:main_h-overlay_h&quot; &quot;scaledWatermark.png&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;automation&quot;&gt;Automation&lt;/h2&gt;

&lt;p&gt;Watermarking a large number of images could take some time if one were to do it by hand, thats why automating this process is essential. There are many ways to automate this process, and I’ve chosen to write a bash script for speed and ease. However, these methods can easily be transferred to another technology or programming language. The important pieces to keep are the processing steps. Those steps consist of the following.
    1. Identify the resolution (width and height) of the image intended to be used as a watermark with FFprobe.exe
    2. Identify the resolution (width and height) of the image that will receive the watermark with FFprobe
    3. Calculate the scale factor to apply to the watermark
    4. Create and execute the command to ffmpeg.exe.&lt;/p&gt;

&lt;p&gt;If you’d like to see the bash script I put together to accomplish this for myself, you can check it out on github &lt;a href=&quot;https://github.com/lgarcia2/ImageWatermarking&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Jan 2020 13:00:00 -0500</pubDate>
        <link>/blog/technical/Watermark</link>
        <guid isPermaLink="true">/blog/technical/Watermark</guid>
        
        <category>Photography</category>
        
        <category>FFmpeg</category>
        
        
        <category>Technical</category>
        
      </item>
    
      <item>
        <title>New Blog, Who&apos;s This</title>
        <description>&lt;h2 id=&quot;ive-made-a-new-blog-again&quot;&gt;I’ve made a new blog! Again!&lt;/h2&gt;

&lt;p&gt;Every blog of mine starts out with a post like this. So why not continue the pattern? Yes, it is very redundant to keep making different iterations of blogs every couple years. However, I’m hoping this time its different (said everyone). All of my previous blog iterations have generally been custom solutions. That is, in order to hone and practice my developer skills, I’ve implemented various web frameworks in order to come up with a blog that works for me. The good news is that I definately gained knowledge and experience from the process. The bad news is that since they were custom solutions, it wasn’t always the easiest to contribute to my own blog. I’m hoping that by avoiding custom work and switching to an established solution, contributing and keeping up with the blog will be easier. Basically, I’m trying to make the barrier to entry easier, hoping that I’ll contribute more.&lt;/p&gt;

&lt;h2 id=&quot;introducing-jekyll&quot;&gt;Introducing Jekyll&lt;/h2&gt;

&lt;p&gt;I chose &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; as my ‘established solution’. Its an application developed with Ruby that takes markdown, along with some style information, to generate a static website. The main idea being that a person could write their blog posts in markdown and use Jekyll to quickly interpret and serve the content on a website. For me, the ‘pros’ are that its easy to work with, easy to contribute to, and has a lot of support. Unfortunately, there are some ‘cons’ as well. If I’m hosting a static site, its hard to embed ‘dynamic’ behavior. A few years ago, again, to practice my developer skills, I made my own version of a url shortner like &lt;a href=&quot;https://bitly.com/&quot;&gt;bit.ly&lt;/a&gt;. Unfortunately, since this is a static site I am unable to embed and host some of my projects like that (You can read more in the Github Pages section).  With that in mind though, I can always host a project somewhere else and link to it if needed. So in the end, the restrictiveness of a static site wasn’t a very big ‘con’ to me. However, there was another major ‘pro’ in using a static site: hosting.&lt;/p&gt;

&lt;h2 id=&quot;github-pages&quot;&gt;Github Pages&lt;/h2&gt;

&lt;p&gt;A major feature of &lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt; thats come out in fairly recent history has been their Github Pages concept. In essence, if you commit static web files to a repository in Github, you can configure the repository in such a way that Github will host the static website for you. Given that Github is free (for personal use) this is a great way to host a website for free. If we go back to my running ‘pros’ and ‘cons’ list, this is a pretty good ‘pro’. It also continues the ease of contribution since all I should need is Jekyll and an internet connection to contribute.&lt;/p&gt;

&lt;h2 id=&quot;a-note-on-integration&quot;&gt;A Note On Integration&lt;/h2&gt;

&lt;p&gt;One of the big concepts being used in modern development is Continuous Integration/Continuous Deployment (CICD). Unfortunately, one of the things I havent quite worked out yet, is how to better improve my deployment pipeline. For example, in writing this post and pushing it live, I have to have Ruby, Jekyll, and Git installed, I have to run Jekyll against the new markdown file, and finally push the new generated site to Github. I have Git, and will continue to have Git installed on all my machines but I’m not a Ruby developer. That is, Ruby and Jekyll are definately a dependency that I don’t work with on a day to day basis. As such, my desktop is the only machine I currently have running Jekyll. This restricts me to contributing to the blog only when I’m on my desktop or when Ruby and Jekyll are installed on a machine I’m working with. This isn’t very portable so CICD is something that I’d like to improve upon going forward. That is, I’d like to be able to commit changes and have the site automatically generated and re-committed so that I only have to worry about committing to Github.&lt;/p&gt;

&lt;h2 id=&quot;thoughts-on-jekyll-alternatives&quot;&gt;Thoughts on Jekyll Alternatives&lt;/h2&gt;

&lt;p&gt;In picking which static site generator I had also tried &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;. Instead of relying on Ruby, hexo uses a Node package. So if you’re not a fan of Ruby, or have different dependencies to manage, Hexo might be a better option for you. In my experience, it does seem more flexible. However, it also seems more verbose and a tiny bit cumbersome. I’ve spent an equally small amount of time with both Jekyll and Hexo so there are definately things I haven’t come across in both options, but either should work for getting a blog up and running quickly with Github pages. There are more static site generators than these two, but since I haven’t worked with them I won’t comment.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;I’m sure I’ll have more opinions as I continue writing posts and continue to work with Jekyll, but so far my experience has been great. I’ve been able to customize this site to my hearts content and have not run into anything in my way. I hope that going forward, I achieve my goal of contributing more to this blog and that Jekyll helps in that regard.&lt;/p&gt;

</description>
        <pubDate>Fri, 26 Apr 2019 10:00:00 -0400</pubDate>
        <link>/blog/non-technical/NewBlogWhoThis</link>
        <guid isPermaLink="true">/blog/non-technical/NewBlogWhoThis</guid>
        
        <category>Jekyll</category>
        
        <category>Github</category>
        
        <category>Hexo</category>
        
        <category>Integration</category>
        
        <category>Deployment</category>
        
        <category>Blog</category>
        
        
        <category>Non-Technical</category>
        
      </item>
    
      <item>
        <title>Test Technical Blog</title>
        <description>&lt;h2 id=&quot;technical-test&quot;&gt;Technical Test&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;This is a test for the Technical Blog&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 14 Apr 2019 20:00:00 -0400</pubDate>
        <link>/blog/technical/Test-Technical</link>
        <guid isPermaLink="true">/blog/technical/Test-Technical</guid>
        
        <category>Jekyll</category>
        
        <category>GitHub</category>
        
        
        <category>Technical</category>
        
      </item>
    
      <item>
        <title>Test Non-Technical Blog</title>
        <description>&lt;h2 id=&quot;non-technical-test&quot;&gt;Non-Technical Test&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;This is a test for the Non-Technical Blog&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 14 Apr 2019 20:00:00 -0400</pubDate>
        <link>/blog/non-technical/Test-Nontechnical</link>
        <guid isPermaLink="true">/blog/non-technical/Test-Nontechnical</guid>
        
        <category>Jekyll</category>
        
        <category>GitHub</category>
        
        
        <category>Non-Technical</category>
        
      </item>
    
  </channel>
</rss>
